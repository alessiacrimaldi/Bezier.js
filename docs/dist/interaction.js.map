{"version":3,"file":"interaction.js","sources":["../../lib/interaction.js"],"sourcesContent":["export default function handleInteraction(cvs, curves, update) {\r\n    const ctx = cvs.getContext(\"2d\");\r\n    let isMoving = false,\r\n        mx = 0,\r\n        my = 0,\r\n        sx = 0,\r\n        sy = 0,\r\n        points,\r\n        selectedPoint,\r\n        selectedCurve;\r\n\r\n    const isMouseNearPoint = (p) => Math.abs(mx - p.x) < 10 && Math.abs(my - p.y) < 10\r\n\r\n    cvs.addEventListener(\"mousedown\", (e) => {\r\n        mx = e.offsetX;\r\n        my = e.offsetY;\r\n\r\n        if (curves.length > 1) {\r\n            curves.forEach(c => {\r\n                points = c.points;\r\n                points.forEach(p => {\r\n                    if (isMouseNearPoint(p)) {\r\n                        isMoving = true;\r\n                        selectedPoint = p; // pointer at curve's point\r\n                        selectedCurve = c; // pointer at curve\r\n                        sx = p.x;\r\n                        sy = p.y;\r\n                        return;\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            points = curves.points;\r\n            points.forEach(p => {\r\n                if (isMouseNearPoint(p)) {\r\n                    isMoving = true;\r\n                    selectedPoint = p; // pointer at curve's point\r\n                    sx = p.x;\r\n                    sy = p.y;\r\n                    return;\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    cvs.addEventListener(\"mousemove\", (e) => {\r\n        if (!isMoving) return;\r\n\r\n        /* Update the coordinates of the selected point with the mouse\r\n        coordinates, considering the initial offset. */\r\n\r\n        /* Since selectedPoint is a pointer to the selected point (moved),\r\n        the coordinates of the point in the selected curve are updated\r\n        when selectedPoint is updated. */\r\n\r\n        selectedPoint.x = sx + (e.offsetX - mx);\r\n        selectedPoint.y = sy + (e.offsetY - my);\r\n        selectedCurve ? selectedCurve.update() : curves.update();\r\n        ctx.clearRect(0, 0, cvs.width, cvs.height);\r\n        update();\r\n    })\r\n\r\n    cvs.addEventListener(\"mouseup\", (e) => {\r\n        isMoving = false;\r\n        selectedPoint = undefined;\r\n        selectedCurve = undefined;\r\n    })\r\n}"],"names":["handleInteraction","cvs","curves","update","ctx","isMoving","mx","my","sx","sy","points","selectedPoint","selectedCurve","isMouseNearPoint","p","c"],"mappings":"AAAe,SAASA,EAAkBC,GAAKC,GAAQC,GAAQ;AAC3D,QAAMC,IAAMH,EAAI,WAAW,IAAI;AAC/B,MAAII,IAAW,IACXC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,GACAC,GACAC;AAEJ,QAAMC,IAAmB,CAACC,MAAM,KAAK,IAAIR,IAAKQ,EAAE,CAAC,IAAI,MAAM,KAAK,IAAIP,IAAKO,EAAE,CAAC,IAAI;AAEhF,EAAAb,EAAI,iBAAiB,aAAa,CAAC,MAAM;AACrC,IAAAK,IAAK,EAAE,SACPC,IAAK,EAAE,SAEHL,EAAO,SAAS,IAChBA,EAAO,QAAQ,CAAAa,MAAK;AAChB,MAAAL,IAASK,EAAE,QACXL,EAAO,QAAQ,CAAAI,MAAK;AAChB,YAAID,EAAiBC,CAAC,GAAG;AACrB,UAAAT,IAAW,IACXM,IAAgBG,GAChBF,IAAgBG,GAChBP,IAAKM,EAAE,GACPL,IAAKK,EAAE;AACP;AAAA;AAAA,MAExB,CAAiB;AAAA,IACjB,CAAa,KAEDJ,IAASR,EAAO,QAChBQ,EAAO,QAAQ,CAAAI,MAAK;AAChB,UAAID,EAAiBC,CAAC,GAAG;AACrB,QAAAT,IAAW,IACXM,IAAgBG,GAChBN,IAAKM,EAAE,GACPL,IAAKK,EAAE;AACP;AAAA;AAAA,IAEpB,CAAa;AAAA,EAEb,CAAK,GAEDb,EAAI,iBAAiB,aAAa,CAAC,MAAM;AACrC,IAAKI,MASLM,EAAc,IAAIH,KAAM,EAAE,UAAUF,IACpCK,EAAc,IAAIF,KAAM,EAAE,UAAUF,IACpCK,IAAgBA,EAAc,OAAQ,IAAGV,EAAO,OAAM,GACtDE,EAAI,UAAU,GAAG,GAAGH,EAAI,OAAOA,EAAI,MAAM,GACzCE;EACR,CAAK,GAEDF,EAAI,iBAAiB,WAAW,CAAC,MAAM;AACnC,IAAAI,IAAW,IACXM,IAAgB,QAChBC,IAAgB;AAAA,EACxB,CAAK;AACL;"}