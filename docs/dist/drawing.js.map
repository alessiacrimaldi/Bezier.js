{"version":3,"file":"drawing.js","sources":["../../lib/drawing.js"],"sourcesContent":["import * as calculation from \"./calculation.js\";\r\nimport { Bezier } from \"./bezier.js\";\r\n\r\n\r\nexport default class Drawing {\r\n    #randomColors;\r\n    #randomIndex;\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.#randomColors = [];\r\n        this.#randomIndex = 0;\r\n        /* FUNCTIONS FOR RANDOM CURVE COLOURS */\r\n        for (var i = 0, j; i < 360; i++) {\r\n            j = (i * 47) % 360;\r\n            this.#randomColors.push(\"hsl(\" + j + \",50%,50%)\");\r\n        }\r\n    }\r\n\r\n    #getRandomColor() {\r\n        this.#randomIndex = (this.#randomIndex + 1) % this.#randomColors.length;\r\n        return this.#randomColors[this.randomIndex];\r\n    }\r\n\r\n    #getRandomFill(a) {\r\n        this.#randomIndex = (this.#randomIndex + 1) % this.#randomColors.length;\r\n        a = typeof a === \"undefined\" ? 1 : a;\r\n        var c = this.#randomColors[this.#randomIndex];\r\n        c = c.replace(\"hsl(\", \"hsla(\").replace(\")\", \",\" + a + \")\");\r\n        return c;\r\n    }\r\n\r\n    /* BASIC DRAWING METHODS */\r\n    drawLine(p1, p2, colour = \"lightgrey\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(p1.x, p1.y);\r\n        this.ctx.lineTo(p2.x, p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPoints(points, r, colour) {\r\n        points.forEach(p => this.drawPoint(p, r, colour));\r\n    }\r\n\r\n    drawPoint(p, r = 3.5, colour = \"black\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawSkeleton(curve, colour) {\r\n        var pts = curve.points;\r\n        this.drawLine(pts[0], pts[1]);\r\n        if (pts.length === 3) {\r\n            this.drawLine(pts[1], pts[2]);\r\n        } else if (pts.length === 4) {\r\n            this.drawLine(pts[2], pts[3]);\r\n        }\r\n        this.drawPoints(pts, 3.5, colour);\r\n    }\r\n\r\n    drawCurve(curve, colour = \"black\", r = 0.1) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        var pts = curve.points;\r\n        this.ctx.moveTo(pts[0].x, pts[0].y);\r\n        if (curve.curvepoints.length == 0) {\r\n            curve.computeCurvePoints();\r\n        }\r\n        this.drawPoints(curve.curvepoints, r, colour);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath(); \r\n    }\r\n\r\n    drawText(text, offset) {\r\n        offset = offset || { x: 0, y: 0 };\r\n        this.ctx.fillText(text, offset.x, offset.y);\r\n    }\r\n\r\n    /* ADDITIONAL DRAWING METHODS FOR LIBRARY USAGE */\r\n    drawLookUpTable(lut, r = 3, colour) {\r\n        this.drawPoints(lut, r, colour);\r\n    }\r\n\r\n    drawLength(curve, arclength, colour = \"red\") {\r\n        var offset = calculation.getOffsetCurve(curve, -10);\r\n        var last = offset.length - 1;\r\n        offset.forEach((c, idx) => {\r\n            this.drawCurve(c, colour);\r\n            if (idx === last) {\r\n                let p1 = calculation.getOffsetCurve(curve, 0.95, -15);\r\n                let p2 = calculation.getCurvePoint(c, 1);\r\n                let p3 = calculation.getOffsetCurve(curve, 0.95, -5);\r\n                this.drawLine(p1, p2, colour);\r\n                this.drawLine(p2, p3, colour);\r\n                let label = ((100 * arclength) | 0) / 100 + \"px\";\r\n                this.drawText(label, { x: p2.x + 7, y: p2.y - 3 });\r\n            }\r\n        });\r\n    }\r\n\r\n    drawCurvePoint(point, r = 5, colour = \"red\") {\r\n        this.drawPoint(point, r, colour);\r\n    }\r\n\r\n    drawTangent(curve, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, curve._derivative.t);\r\n        var dv = curve._derivative;\r\n        this.drawPoint(pt, 2, \"red\");\r\n        this.drawLine(pt, { x: pt.x + dv.x, y: pt.y + dv.y }, colour);\r\n    }\r\n\r\n    drawTangents(curve, dvs, gap, colour = \"red\") {\r\n        for (var t = 0, i = 0, pt; t <= 1; t += gap, i++) {\r\n            pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + dvs[i].x, y: pt.y + dvs[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawNormal(curve, normal, t, d = 20, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, t);\r\n        this.drawLine(pt, { x: pt.x + d * normal.x, y: pt.y + d * normal.y }, colour);\r\n    }\r\n\r\n    drawNormals(curve, normals, gap, d = 20, colour = \"red\") {\r\n        for (var t = 0, i = 0; t <= 1; t += gap, i++) {\r\n            var pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + d * normals[i].x, y: pt.y + d * normals[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawSplittedCurve(curve, split, colour = \"red\", t1, t2) {\r\n        if (t2) {\r\n            this.drawCurve(split, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1), 3, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t2), 3, colour);\r\n        } else {\r\n            this.drawCurve(split[0], colour);\r\n            this.drawCurve(split[1], colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1), 3, colour);\r\n        }\r\n    }\r\n\r\n    drawCurveExtremas(curve, extrema, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        extrema.values.forEach(t => {\r\n            let extremaPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(extremaPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawInflectionPoints(curve, inflectionPoints, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        inflectionPoints.forEach(t => {\r\n            let inflectionPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(inflectionPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvature(curve, kr, t, colour = \"#ff7f33\") {\r\n        var p = calculation.getCurvePoint(curve, t);\r\n        var n = calculation.calculateNormal(curve, t);\r\n        this.drawLine(p, { x: p.x + n.x * kr.k * 5000, y: p.y + n.y * kr.k * 5000, }, colour);\r\n    }\r\n\r\n    drawCurvatures(curve, krs, gap = 2) {\r\n        for (var s = 0, i = 0; s < 256; s += gap, i++) {\r\n            let t = s / 255;\r\n            let p = calculation.getCurvePoint(curve, t);\r\n            let n = calculation.calculateNormal(curve, t, true);\r\n            this.drawLine(p, { x: p.x + n.x * krs[i].k * 5000, y: p.y + n.y * krs[i].k * 5000, }, \"rgba(255,127,\" + s + \",0.6)\");\r\n        }\r\n    }\r\n\r\n    drawBoundingBox(bbox, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(bbox.x.min, bbox.y.min);\r\n        this.ctx.lineTo(bbox.x.min, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.min);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawHullPoints(hull, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        if (hull.length === 6) {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.moveTo(hull[3].x, hull[3].y);\r\n            this.ctx.lineTo(hull[4].x, hull[4].y);\r\n        } else {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.lineTo(hull[3].x, hull[3].y);\r\n            this.ctx.moveTo(hull[4].x, hull[4].y);\r\n            this.ctx.lineTo(hull[5].x, hull[5].y);\r\n            this.ctx.lineTo(hull[6].x, hull[6].y);\r\n            this.ctx.moveTo(hull[7].x, hull[7].y);\r\n            this.ctx.lineTo(hull[8].x, hull[8].y);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.drawPoint(hull.slice(-1)[0], 4.5, colour);\r\n    }\r\n\r\n    drawProjection(proj, p, colour = \"red\") {\r\n        this.drawLine(proj, p, colour);\r\n    }\r\n\r\n    drawOffsetCurve(offsetCurve, colour = \"red\") {\r\n        offsetCurve.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawOffsetPoint(offsetCoords, colour = \"red\") {\r\n        this.drawPoint(offsetCoords, 4, colour);\r\n    }\r\n\r\n    drawReducedCurve(reduced, colour) {\r\n        reduced.forEach((c, i) => {\r\n            if (i > 0) this.drawPoint(c.points[0], 3);\r\n            this.drawCurve(c, colour || this.#getRandomColor());\r\n        })\r\n    }\r\n\r\n    drawCircularArcs(arcs, colour) {\r\n        arcs.forEach(arc => this.drawArc(arc, colour));\r\n    }\r\n\r\n    drawArc(arc, colour = this.#getRandomFill(0.1)) {\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(arc.x, arc.y);\r\n        this.ctx.arc(arc.x, arc.y, arc.r, arc.s, arc.e);\r\n        this.ctx.lineTo(arc.x, arc.y);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawScaledCurve(reduced, scaled, colour) {\r\n        this.drawReducedCurve(reduced, \"black\");\r\n        for (var k = 0; k <= 6; k++) {\r\n            this.drawCurve(scaled[k], colour);\r\n        }\r\n    }\r\n\r\n    drawCurveOutline(outline, outColour = \"red\", offset, offColour = \"rgba(0,0,255,0.2)\") {\r\n        outline.curves.forEach(c => this.drawCurve(c, outColour));\r\n        if (offset) {\r\n            offset.pos.curves.forEach(c => this.drawCurve(c, offColour));\r\n            offset.neg.curves.forEach(c => this.drawCurve(c, offColour));\r\n        }\r\n    }\r\n\r\n    drawCurveGradOutline(goutline, colour = \"red\") {\r\n        goutline.curves.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawShapedOutline(soutline, colour, fillColour) {\r\n        soutline.forEach(s => this.drawShape(s, colour, fillColour));\r\n    }\r\n\r\n    drawShape(shape, colour = \"red\", fillColour = this.#getRandomFill(0.2)) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fillColour;\r\n        var order = shape.forward.points.length - 1;\r\n        var scl = shape.startcap.points.length;\r\n        var ecl = shape.endcap.points.length;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(\r\n            shape.startcap.points[0].x,\r\n            shape.startcap.points[0].y\r\n        );\r\n        this.ctx.lineTo(\r\n            shape.startcap.points[scl - 1].x,\r\n            shape.startcap.points[scl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y,\r\n                shape.forward.points[3].x,\r\n                shape.forward.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y\r\n            );\r\n        }\r\n        this.ctx.lineTo(\r\n            shape.endcap.points[ecl - 1].x,\r\n            shape.endcap.points[ecl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y,\r\n                shape.back.points[3].x,\r\n                shape.back.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y\r\n            );\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawSelfIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        if (curve.order == 2) return\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawLineIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        intersection.forEach(t => {\r\n            var point = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawCurvesIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n}"],"names":["Drawing","ctx","__privateAdd","_getRandomColor","_getRandomFill","_randomColors","_randomIndex","__privateSet","j","__privateGet","p1","p2","colour","points","r","p","fill","curve","pts","text","offset","lut","arclength","calculation.getOffsetCurve","last","c","idx","calculation.getCurvePoint","p3","label","point","pt","dv","dvs","gap","t","i","normal","d","normals","split","t1","t2","extrema","extremaPoint","inflectionPoints","inflectionPoint","kr","n","calculation.calculateNormal","krs","s","bbox","hull","proj","offsetCurve","offsetCoords","reduced","__privateMethod","getRandomColor_fn","arcs","arc","getRandomFill_fn","scaled","k","outline","outColour","offColour","goutline","soutline","fillColour","shape","order","scl","ecl","intersection","pair","v","a"],"mappings":"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"}