{"version":3,"file":"drawing.js","sources":["../../lib/drawing.js"],"sourcesContent":["import * as calculation from \"./calculation.js\";\r\n\r\n\r\nexport default class Drawing {\r\n    #rainbowColors = [\r\n        \"#FF0000\",\r\n        \"#FF7F00\",\r\n        \"#FFFF00\",\r\n        \"#00FF00\",\r\n        \"#0000FF\",\r\n        \"#4B0082\",\r\n        \"#8F00FF\"\r\n    ];\r\n    #shadeColors = [\r\n        \"rgba(255, 0, 0, 0.5)\",      // rosso\r\n        \"rgba(255, 128, 0, 0.5)\",    // arancione\r\n        \"rgba(255, 255, 0, 0.5)\",    // giallo\r\n        \"rgba(128, 255, 0, 0.5)\",    // verde chiaro\r\n        \"rgba(0, 255, 0, 0.5)\",      // verde\r\n        \"rgba(0, 255, 128, 0.5)\",    // verde acqua\r\n        \"rgba(0, 255, 255, 0.5)\",    // ciano\r\n        \"rgba(0, 128, 255, 0.5)\",    // blu chiaro\r\n        \"rgba(0, 0, 255, 0.5)\",      // blu\r\n        \"rgba(128, 0, 255, 0.5)\",    // viola\r\n        \"rgba(255, 0, 255, 0.5)\",    // magenta\r\n        \"rgba(255, 0, 128, 0.5)\",    // rosa\r\n        \"rgba(255, 128, 128, 0.5)\",  // rosa chiaro\r\n        \"rgba(255, 0, 192, 0.5)\",    // rosa scuro\r\n        \"rgba(128, 128, 128, 0.5)\"   // grigio\r\n    ]\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    /* BASIC DRAWING METHODS */\r\n    drawLine(p1, p2, colour = \"lightgrey\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(p1.x, p1.y);\r\n        this.ctx.lineTo(p2.x, p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPoints(points, r, colour) {\r\n        points.forEach(p => this.drawPoint(p, r, colour));\r\n    }\r\n\r\n    drawPoint(p, r = 3.5, colour = \"black\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawCircle(circle, colour = \"red\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawSkeleton(curve, colour) {\r\n        var pts = curve.points;\r\n        this.drawLine(pts[0], pts[1]);\r\n        if (pts.length === 3) {\r\n            this.drawLine(pts[1], pts[2]);\r\n        } else if (pts.length === 4) {\r\n            this.drawLine(pts[2], pts[3]);\r\n        }\r\n        this.drawPoints(pts, 3.5, colour);\r\n    }\r\n\r\n    drawCurve(curve, colour = \"black\", r = 0.1) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        var pts = curve.points;\r\n        this.ctx.moveTo(pts[0].x, pts[0].y);\r\n        if (curve.curvepoints.length == 0) {\r\n            curve.computeCurvePoints();\r\n        }\r\n        this.drawPoints(curve.curvepoints, r, colour);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawText(text, offset) {\r\n        offset = offset || { x: 0, y: 0 };\r\n        this.ctx.fillText(text, offset.x, offset.y);\r\n    }\r\n\r\n    /* ADDITIONAL DRAWING METHODS FOR LIBRARY USAGE */\r\n    drawLookUpTable(lut, r = 3, colour) {\r\n        this.drawPoints(lut, r, colour);\r\n    }\r\n\r\n    drawLength(curve, arclength, colour = \"red\") {\r\n        var offset = calculation.getOffsetCurve(curve, -10);\r\n        var last = offset.length - 1;\r\n        offset.forEach((c, idx) => {\r\n            this.drawCurve(c, colour);\r\n            if (idx === last) {\r\n                let p1 = calculation.getOffsetCurve(curve, 0.95, -15);\r\n                let p2 = calculation.getCurvePoint(c, 1);\r\n                let p3 = calculation.getOffsetCurve(curve, 0.95, -5);\r\n                this.drawLine(p1, p2, colour);\r\n                this.drawLine(p2, p3, colour);\r\n                let label = ((100 * arclength) | 0) / 100 + \"px\";\r\n                this.drawText(label, { x: p2.x + 7, y: p2.y - 3 });\r\n            }\r\n        });\r\n    }\r\n\r\n    drawCurvePoint(point, r = 5, colour = \"red\") {\r\n        this.drawPoint(point, r, colour);\r\n    }\r\n\r\n    drawTangent(curve, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, curve._derivative.t);\r\n        var dv = curve._derivative;\r\n        this.drawPoint(pt, 2, colour, colour);\r\n        this.drawLine(pt, { x: pt.x + dv.x, y: pt.y + dv.y }, colour);\r\n    }\r\n\r\n    drawTangents(curve, dvs, gap, colour = \"red\") {\r\n        for (var t = 0, i = 0, pt; t <= 1; t += gap, i++) {\r\n            pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + dvs[i].x, y: pt.y + dvs[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawNormal(curve, normal, t, d = 20, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, t);\r\n        this.drawPoint(pt, 2, colour, colour);\r\n        this.drawLine(pt, { x: pt.x + d * normal.x, y: pt.y + d * normal.y }, colour);\r\n    }\r\n\r\n    drawNormals(curve, normals, gap, d = 20, colour = \"red\") {\r\n        for (var t = 0, i = 0; t <= 1; t += gap, i++) {\r\n            var pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + d * normals[i].x, y: pt.y + d * normals[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawSplittedCurve(curve, split, colour = \"red\", t1, t2) {\r\n        if (t2) {\r\n            this.drawCurve(split, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1), 3, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t2), 3, colour);\r\n        } else {\r\n            this.drawCurve(split[0], colour);\r\n            this.drawCurve(split[1], colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1), 3, colour);\r\n        }\r\n    }\r\n\r\n    drawCurveExtremas(curve, extrema, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        extrema.values.forEach(t => {\r\n            let extremaPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(extremaPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawInflectionPoints(curve, inflectionPoints, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        inflectionPoints.forEach(t => {\r\n            let inflectionPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(inflectionPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvature(curve, kr, t, colour = \"red\") {\r\n        var p = calculation.getCurvePoint(curve, t);\r\n        var n = calculation.calculateNormal(curve, t);\r\n        this.drawLine(p, { x: p.x + n.x * kr.r, y: p.y + n.y * kr.r }, colour);\r\n    }\r\n\r\n    drawCurvatures(curve, krs, gap = 2) {\r\n        for (var s = 0, i = 0; s < 256; s += gap, i++) {\r\n            let t = s / 255;\r\n            let p = calculation.getCurvePoint(curve, t);\r\n            let n = calculation.calculateNormal(curve, t, true);\r\n            this.drawLine(p, { x: p.x + n.x * krs[i].k * 5000, y: p.y + n.y * krs[i].k * 5000, }, \"rgba(255,127,\" + s + \",0.6)\");\r\n        }\r\n    }\r\n\r\n    drawBoundingBox(bbox, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(bbox.x.min, bbox.y.min);\r\n        this.ctx.lineTo(bbox.x.min, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.min);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawHullPoints(hull, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        if (hull.length === 6) {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.moveTo(hull[3].x, hull[3].y);\r\n            this.ctx.lineTo(hull[4].x, hull[4].y);\r\n        } else {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.lineTo(hull[3].x, hull[3].y);\r\n            this.ctx.moveTo(hull[4].x, hull[4].y);\r\n            this.ctx.lineTo(hull[5].x, hull[5].y);\r\n            this.ctx.lineTo(hull[6].x, hull[6].y);\r\n            this.ctx.moveTo(hull[7].x, hull[7].y);\r\n            this.ctx.lineTo(hull[8].x, hull[8].y);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.drawPoint(hull.slice(-1)[0], 4.5, colour);\r\n    }\r\n\r\n    drawProjection(proj, p, colour = \"red\") {\r\n        this.drawLine(proj, p, colour);\r\n    }\r\n\r\n    drawOffsetCurve(offsetCurve, colour) {\r\n        offsetCurve.forEach((c, i) => this.drawCurve(c, colour || this.#rainbowColors[i]));\r\n    }\r\n\r\n    drawOffsetPoint(offsetCoords, colour = \"red\") {\r\n        this.drawPoint(offsetCoords, 4, colour);\r\n    }\r\n\r\n    drawReducedCurve(reduced, colour) {\r\n        reduced.forEach((c, i) => {\r\n            if (i > 0) this.drawPoint(c.points[0], 3);\r\n            this.drawCurve(c, colour || this.#rainbowColors[i]);\r\n        })\r\n    }\r\n\r\n    drawCircularArcs(arcs, colour) {\r\n        arcs.forEach((arc, i) => this.drawArc(arc, colour || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawArc(arc, colour) {\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(arc.x, arc.y);\r\n        this.ctx.arc(arc.x, arc.y, arc.r, arc.s, arc.e);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawScaledCurve(reduced, scaled, colour) {\r\n        this.drawReducedCurve(reduced, \"black\");\r\n        for (var k = 0; k <= 6; k++) {\r\n            this.drawCurve(scaled[k], colour);\r\n        }\r\n    }\r\n\r\n    drawCurveOutline(outline, outColour = \"red\", offset, offColour = \"rgba(0,0,255,0.2)\") {\r\n        outline.curves.forEach(c => this.drawCurve(c, outColour));\r\n        if (offset) {\r\n            offset.pos.curves.forEach(c => this.drawCurve(c, offColour));\r\n            offset.neg.curves.forEach(c => this.drawCurve(c, offColour));\r\n        }\r\n    }\r\n\r\n    drawCurveGradOutline(goutline, colour = \"red\") {\r\n        goutline.curves.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawShapedOutline(soutline, colour, fillColour) {\r\n        soutline.forEach((s, i) => this.drawShape(s, colour, fillColour || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawShape(shape, colour = \"red\", fillColour) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fillColour;\r\n        var order = shape.forward.points.length - 1;\r\n        var scl = shape.startcap.points.length;\r\n        var ecl = shape.endcap.points.length;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(\r\n            shape.startcap.points[0].x,\r\n            shape.startcap.points[0].y\r\n        );\r\n        this.ctx.lineTo(\r\n            shape.startcap.points[scl - 1].x,\r\n            shape.startcap.points[scl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y,\r\n                shape.forward.points[3].x,\r\n                shape.forward.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y\r\n            );\r\n        }\r\n        this.ctx.lineTo(\r\n            shape.endcap.points[ecl - 1].x,\r\n            shape.endcap.points[ecl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y,\r\n                shape.back.points[3].x,\r\n                shape.back.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y\r\n            );\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawSelfIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        if (curve.order == 2) return\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawLineIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        intersection.forEach(t => {\r\n            var point = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawCurvesIntersection(curve, intersection, r = 4, colour = \"red\") {\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n}"],"names":["Drawing","ctx","__privateAdd","_rainbowColors","_shadeColors","p1","p2","colour","points","r","p","fill","circle","curve","pts","text","offset","lut","arclength","calculation.getOffsetCurve","last","c","idx","calculation.getCurvePoint","p3","label","point","pt","dv","dvs","gap","t","i","normal","d","normals","split","t1","t2","extrema","extremaPoint","inflectionPoints","inflectionPoint","kr","n","calculation.calculateNormal","krs","s","bbox","hull","proj","offsetCurve","__privateGet","offsetCoords","reduced","arcs","arc","scaled","k","outline","outColour","offColour","goutline","soutline","fillColour","shape","order","scl","ecl","intersection","pair","v"],"mappings":"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"}