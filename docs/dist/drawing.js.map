{"version":3,"file":"drawing.js","sources":["../../lib/drawing.js"],"sourcesContent":["export default class Drawing {\r\n    #rainbowColors = [\r\n        \"#FF0000\",\r\n        \"#FF7F00\",\r\n        \"#FFFF00\",\r\n        \"#00FF00\",\r\n        \"#0000FF\",\r\n        \"#4B0082\",\r\n        \"#8F00FF\"\r\n    ];\r\n    #shadeColors = [\r\n        \"rgba(255, 0, 0, 0.5)\",      // rosso\r\n        \"rgba(255, 128, 0, 0.5)\",    // arancione\r\n        \"rgba(255, 255, 0, 0.5)\",    // giallo\r\n        \"rgba(128, 255, 0, 0.5)\",    // verde chiaro\r\n        \"rgba(0, 255, 0, 0.5)\",      // verde\r\n        \"rgba(0, 255, 128, 0.5)\",    // verde acqua\r\n        \"rgba(0, 255, 255, 0.5)\",    // ciano\r\n        \"rgba(0, 128, 255, 0.5)\",    // blu chiaro\r\n        \"rgba(0, 0, 255, 0.5)\",      // blu\r\n        \"rgba(128, 0, 255, 0.5)\",    // viola\r\n        \"rgba(255, 0, 255, 0.5)\",    // magenta\r\n        \"rgba(255, 0, 128, 0.5)\",    // rosa\r\n        \"rgba(255, 128, 128, 0.5)\",  // rosa chiaro\r\n        \"rgba(255, 0, 192, 0.5)\",    // rosa scuro\r\n        \"rgba(128, 128, 128, 0.5)\"   // grigio\r\n    ]\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    /* Basic drawing methods */\r\n    drawLine(p1, p2, colour = \"lightgrey\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(p1.x, p1.y);\r\n        this.ctx.lineTo(p2.x, p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPoints(points, r, colour, fill) {\r\n        points.forEach(p => this.drawPoint(p, r, colour, fill));\r\n    }\r\n\r\n    drawPoint(p, r = 3.5, colour = \"black\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawCircle(circle, colour = \"red\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawSkeleton(curve, colour) {\r\n        var pts = curve.points;\r\n        this.drawLine(pts[0], pts[1]);\r\n        if (pts.length === 3) {\r\n            this.drawLine(pts[1], pts[2]);\r\n        } else if (pts.length === 4) {\r\n            this.drawLine(pts[2], pts[3]);\r\n        }\r\n        this.drawPoints(pts, 3.5, colour);\r\n    }\r\n\r\n    drawCurve(curve, colour = \"black\", r = 0.1) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        var pts = curve.points;\r\n        this.ctx.moveTo(pts[0].x, pts[0].y);\r\n        if (curve.curvepoints.length == 0) {\r\n            curve.computeCurvePoints();\r\n        }\r\n        this.drawPoints(curve.curvepoints, r, colour);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawText(text, offset) {\r\n        offset = offset || { x: 0, y: 0 };\r\n        this.ctx.fillText(text, offset.x, offset.y);\r\n    }\r\n\r\n    /* Additional drawing methods for library usage */\r\n    drawLookupTable(curve, r = 3, colour = \"black\") {\r\n        this.drawPoints(curve._lut, r, colour, \"white\");\r\n    }\r\n\r\n    drawLength(curve, colour = \"red\") {\r\n        var offset = curve.offset(-10);\r\n        var last = offset.length - 1;\r\n        offset.forEach((c, idx) => {\r\n            this.drawCurve(c, colour);\r\n            if (idx === last) {\r\n                let p1 = curve.offset(0.95, -15);\r\n                let p2 = c.offset(1);\r\n                let p3 = curve.offset(0.95, -5);\r\n                this.drawLine(p1, p2, colour);\r\n                this.drawLine(p2, p3, colour);\r\n                let label = ((100 * curve.len) | 0) / 100 + \"px\";\r\n                this.drawText(label, { x: p2.x + 7, y: p2.y - 3 });\r\n            }\r\n        });\r\n    }\r\n\r\n    drawCurvePoint(curve, r = 5, colour = \"red\") {\r\n        this.drawPoint(curve.p, r, colour);\r\n    }\r\n\r\n    drawTangent(curve, colour = \"red\") {\r\n        var pt = curve.get(curve.dv.t);\r\n        var dv = curve.dv;\r\n        this.drawPoint(pt, 2.5, colour, \"white\");\r\n        this.drawLine(pt, { x: pt.x + dv.x, y: pt.y + dv.y }, colour);\r\n    }\r\n\r\n    drawNormal(curve, d = 40, colour = \"red\") {\r\n        const n = curve.n, pt = curve.get(n.t);\r\n        this.drawPoint(pt, 2.5, colour, \"white\");\r\n        this.drawLine(pt, { x: pt.x + d * n.x, y: pt.y + d * n.y }, colour);\r\n    }\r\n\r\n    drawSplittedCurve(curve, colour = \"red\") {\r\n        if (curve.subc.c) {\r\n            this.drawCurve(curve.subc.c[0], colour);\r\n            this.drawCurve(curve.subc.c[1], colour);\r\n            this.drawPoint(curve.get(curve.subc.t), 3, colour);\r\n        } else {\r\n            this.drawCurve(curve.subc.v, colour);\r\n            this.drawPoint(curve.get(curve.subc.t1), 3, colour);\r\n            this.drawPoint(curve.get(curve.subc.t2), 3, colour);\r\n        }\r\n    }\r\n\r\n    drawCurveExtremas(curve, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        curve.extrs.values.forEach(t => {\r\n            let extremaPoint = curve.get(t);\r\n            this.drawPoint(extremaPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawInflectionPoints(curve, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        curve.infl.forEach(t => {\r\n            let inflectionPoint = curve.get(t);\r\n            this.drawPoint(inflectionPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvature(curve, colour = \"red\") {\r\n        const t = curve.kr.t,\r\n            r = curve.kr.r,\r\n            p = curve.get(t),\r\n            n = curve.normal(t);\r\n        this.drawLine(p, { x: p.x + n.x * r, y: p.y + n.y * r }, colour);\r\n    }\r\n\r\n    drawBoundingBox(curve, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(curve.bb.x.min, curve.bb.y.min);\r\n        this.ctx.lineTo(curve.bb.x.min, curve.bb.y.max);\r\n        this.ctx.lineTo(curve.bb.x.max, curve.bb.y.max);\r\n        this.ctx.lineTo(curve.bb.x.max, curve.bb.y.min);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawHullPoints(curve, colour = \"red\") {\r\n        const hull = curve.hullp;\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        if (hull.length === 6) {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.moveTo(hull[3].x, hull[3].y);\r\n            this.ctx.lineTo(hull[4].x, hull[4].y);\r\n        } else {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.lineTo(hull[3].x, hull[3].y);\r\n            this.ctx.moveTo(hull[4].x, hull[4].y);\r\n            this.ctx.lineTo(hull[5].x, hull[5].y);\r\n            this.ctx.lineTo(hull[6].x, hull[6].y);\r\n            this.ctx.moveTo(hull[7].x, hull[7].y);\r\n            this.ctx.lineTo(hull[8].x, hull[8].y);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.drawPoint(hull.slice(-1)[0], 4.5, colour);\r\n    }\r\n\r\n    drawProjection(curve, colour = \"red\") {\r\n        this.drawLine(curve.projp, curve.projp.point, colour);\r\n    }\r\n\r\n    drawOffsetCurve(curve, colour) {\r\n        curve.offst.forEach((c, i) => this.drawCurve(c, colour || this.#rainbowColors[i]));\r\n    }\r\n\r\n    drawOffsetPoint(curve, r = 4, colour = \"red\") {\r\n        this.drawPoint(curve.offstcoords, r, colour, \"white\");\r\n    }\r\n\r\n    drawReducedCurve(curve, colour) {\r\n        curve.redc.forEach((c, i) => {\r\n            if (i > 0) this.drawPoint(c.points[0], 3);\r\n            this.drawCurve(c, colour || this.#rainbowColors[i]);\r\n        })\r\n    }\r\n\r\n    drawCircularArcs(curve, colour) {\r\n        curve.carcs.forEach((arc, i) => this.drawArc(arc, colour || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawArc(arc, colour) {\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(arc.x, arc.y);\r\n        this.ctx.arc(arc.x, arc.y, arc.r, arc.s, arc.e);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawScaledCurve(curve, colour = \"black\") {\r\n        this.drawReducedCurve(curve.redc, colour);\r\n        for (var k = 0; k <= 6; k++) {\r\n            this.drawCurve(curve.scaled[k], colour);\r\n        }\r\n    }\r\n\r\n    drawOutline(curve, colour = \"red\") {\r\n        curve.outl.curves.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawShapedOutline(curve, colour = \"red\", fill) {\r\n        curve.shapeoutl.forEach((s, i) => this.drawShape(s, colour, fill || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawShape(shape, colour, fill) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        var order = shape.forward.points.length - 1;\r\n        var scl = shape.startcap.points.length;\r\n        var ecl = shape.endcap.points.length;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(\r\n            shape.startcap.points[0].x,\r\n            shape.startcap.points[0].y\r\n        );\r\n        this.ctx.lineTo(\r\n            shape.startcap.points[scl - 1].x,\r\n            shape.startcap.points[scl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y,\r\n                shape.forward.points[3].x,\r\n                shape.forward.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y\r\n            );\r\n        }\r\n        this.ctx.lineTo(\r\n            shape.endcap.points[ecl - 1].x,\r\n            shape.endcap.points[ecl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y,\r\n                shape.back.points[3].x,\r\n                shape.back.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y\r\n            );\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawSelfIntersection(curve, r = 4, colour = \"red\") {\r\n        if (curve.order == 2) return\r\n        curve.intersections.self.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = curve.get(t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawLineIntersection(curve, r = 4, colour = \"red\") {\r\n        curve.intersections.line.forEach(t => {\r\n            var point = curve.get(t);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawCurvesIntersection(curve, r = 4, colour = \"red\") {\r\n        curve.intersections.curve.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = curve.get(t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n}"],"names":["_rainbowColors","_shadeColors","Drawing","ctx","__privateAdd","p1","p2","colour","points","r","fill","p","circle","curve","pts","text","offset","last","c","idx","p3","label","pt","dv","d","n","t","extremaPoint","inflectionPoint","hull","i","__privateGet","arc","k","s","shape","order","scl","ecl","pair","v","point"],"mappings":"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"}