{"version":3,"file":"drawing.js","sources":["../../lib/drawing.js"],"sourcesContent":["export default class Drawing {\r\n    #rainbowColors = [\r\n        \"#FF0000\",\r\n        \"#FF7F00\",\r\n        \"#FFFF00\",\r\n        \"#00FF00\",\r\n        \"#0000FF\",\r\n        \"#4B0082\",\r\n        \"#8F00FF\"\r\n    ];\r\n    #shadeColors = [\r\n        \"rgba(255, 0, 0, 0.5)\",      // rosso\r\n        \"rgba(255, 128, 0, 0.5)\",    // arancione\r\n        \"rgba(255, 255, 0, 0.5)\",    // giallo\r\n        \"rgba(128, 255, 0, 0.5)\",    // verde chiaro\r\n        \"rgba(0, 255, 0, 0.5)\",      // verde\r\n        \"rgba(0, 255, 128, 0.5)\",    // verde acqua\r\n        \"rgba(0, 255, 255, 0.5)\",    // ciano\r\n        \"rgba(0, 128, 255, 0.5)\",    // blu chiaro\r\n        \"rgba(0, 0, 255, 0.5)\",      // blu\r\n        \"rgba(128, 0, 255, 0.5)\",    // viola\r\n        \"rgba(255, 0, 255, 0.5)\",    // magenta\r\n        \"rgba(255, 0, 128, 0.5)\",    // rosa\r\n        \"rgba(255, 128, 128, 0.5)\",  // rosa chiaro\r\n        \"rgba(255, 0, 192, 0.5)\",    // rosa scuro\r\n        \"rgba(128, 128, 128, 0.5)\"   // grigio\r\n    ]\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    /* Basic drawing methods */\r\n    drawLine(p1, p2, colour = \"lightgrey\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(p1.x, p1.y);\r\n        this.ctx.lineTo(p2.x, p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPoints(points, r, colour, fill) {\r\n        points.forEach(p => this.drawPoint(p, r, colour, fill));\r\n    }\r\n\r\n    drawPoint(p, r = 3.5, colour = \"black\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawCircle(circle, colour = \"red\", fill = \"transparent\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawSkeleton(curve, colour) {\r\n        var pts = curve.points;\r\n        this.drawLine(pts[0], pts[1]);\r\n        if (pts.length === 3) {\r\n            this.drawLine(pts[1], pts[2]);\r\n        } else if (pts.length === 4) {\r\n            this.drawLine(pts[2], pts[3]);\r\n        }\r\n        this.drawPoints(pts, 3.5, colour);\r\n    }\r\n\r\n    drawCurve(curve, colour = \"black\", r = 0.1) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        var pts = curve.points;\r\n        this.ctx.moveTo(pts[0].x, pts[0].y);\r\n        if (curve.curvepoints.length == 0) {\r\n            curve.computeCurvePoints();\r\n        }\r\n        this.drawPoints(curve.curvepoints, r, colour);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawText(text, offset, colour = \"black\") {\r\n        offset = offset || { x: 0, y: 0 };\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.fillText(text, offset.x, offset.y);\r\n    }\r\n\r\n    /* Additional drawing methods for library usage */\r\n    drawLookupTable(curve, r = 3, colour = \"black\") {\r\n        this.drawPoints(curve._lut, r, colour, \"white\");\r\n    }\r\n\r\n    drawLength(curve, colour = \"red\") {\r\n        let offset = curve.offset(-10);\r\n        let last = offset.length - 1;\r\n        offset.forEach((c, idx) => {\r\n            this.drawCurve(c, colour);\r\n            if (idx === last) {\r\n                let p1 = curve.offset(0.95, -15);\r\n                let p2 = c.get(1);\r\n                let p3 = curve.offset(0.95, -5);\r\n                this.drawLine(p1, p2, colour);\r\n                this.drawLine(p2, p3, colour);\r\n                let label = ((100 * curve.len) | 0) / 100 + \"px\";\r\n                this.drawText(label, { x: p2.x + 7, y: p2.y - 3 });\r\n            }\r\n        })\r\n    }\r\n\r\n    drawCurvePoint(curve, r = 5, colour = \"red\") {\r\n        this.drawPoint(curve.p, r, colour);\r\n    }\r\n\r\n    drawTangent(curve, colour = \"red\") {\r\n        var pt = curve.get(curve.dv.t);\r\n        var dv = curve.dv;\r\n        this.drawPoint(pt, 2.5, colour, \"white\");\r\n        this.drawLine(pt, { x: pt.x + dv.x, y: pt.y + dv.y }, colour);\r\n    }\r\n\r\n    drawNormal(curve, d = 40, colour = \"red\") {\r\n        const n = curve.norm, pt = curve.get(n.t);\r\n        this.drawPoint(pt, 2.5, colour, \"white\");\r\n        this.drawLine(pt, { x: pt.x + d * n.x, y: pt.y + d * n.y }, colour);\r\n    }\r\n\r\n    drawSplittedCurve(curve, colour = \"red\") {\r\n        if (curve.subc.c) {\r\n            this.drawCurve(curve.subc.c[0], colour);\r\n            this.drawCurve(curve.subc.c[1], colour);\r\n            this.drawPoint(curve.get(curve.subc.t), 3, colour);\r\n        } else {\r\n            this.drawCurve(curve.subc.v, colour);\r\n            this.drawPoint(curve.get(curve.subc.t1), 3, colour);\r\n            this.drawPoint(curve.get(curve.subc.t2), 3, colour);\r\n        }\r\n    }\r\n\r\n    drawCurveExtremas(curve, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        curve.extrs.values.forEach(t => {\r\n            let extremaPoint = curve.get(t);\r\n            this.drawPoint(extremaPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawInflectionPoints(curve, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        curve.infl.forEach(t => {\r\n            let inflectionPoint = curve.get(t);\r\n            this.drawPoint(inflectionPoint, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvature(curve, colour = \"red\") {\r\n        const t = curve.kr.t,\r\n            r = curve.kr.r,\r\n            p = curve.get(t),\r\n            n = curve.normal(t);\r\n        this.drawLine(p, { x: p.x + n.x * r, y: p.y + n.y * r }, colour);\r\n    }\r\n\r\n    drawBoundingBox(curve, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(curve.bb.x.min, curve.bb.y.min);\r\n        this.ctx.lineTo(curve.bb.x.min, curve.bb.y.max);\r\n        this.ctx.lineTo(curve.bb.x.max, curve.bb.y.max);\r\n        this.ctx.lineTo(curve.bb.x.max, curve.bb.y.min);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawTightBBox(curve, colour = \"red\") {\r\n        this.drawLine(curve.tbb.p1, curve.tbb.p2, colour);\r\n        this.drawLine(curve.tbb.p2, curve.tbb.p3, colour);\r\n        this.drawLine(curve.tbb.p3, curve.tbb.p4, colour);\r\n        this.drawLine(curve.tbb.p4, curve.tbb.p1, colour);\r\n    }\r\n\r\n    drawHullPoints(curve, colour = \"red\") {\r\n        const hull = curve.hullp;\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        if (hull.length === 6) {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.moveTo(hull[3].x, hull[3].y);\r\n            this.ctx.lineTo(hull[4].x, hull[4].y);\r\n        } else {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.lineTo(hull[3].x, hull[3].y);\r\n            this.ctx.moveTo(hull[4].x, hull[4].y);\r\n            this.ctx.lineTo(hull[5].x, hull[5].y);\r\n            this.ctx.lineTo(hull[6].x, hull[6].y);\r\n            this.ctx.moveTo(hull[7].x, hull[7].y);\r\n            this.ctx.lineTo(hull[8].x, hull[8].y);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.drawPoint(hull.slice(-1)[0], 4.5, colour);\r\n    }\r\n\r\n    drawProjection(curve, colour = \"red\") {\r\n        this.drawLine(curve.projp, curve.projp.point, colour);\r\n    }\r\n\r\n    drawOffsetCurve(curve, colour) {\r\n        curve.offst.forEach((c, i) => this.drawCurve(c, colour || this.#rainbowColors[i]));\r\n    }\r\n\r\n    drawOffsetPoint(curve, r = 4, colour = \"red\") {\r\n        this.drawPoint(curve.offstcoords, r, colour, \"white\");\r\n    }\r\n\r\n    drawReducedCurve(curve, colour) {\r\n        curve.redc.forEach((c, i) => {\r\n            if (i > 0) this.drawPoint(c.points[0], 3);\r\n            this.drawCurve(c, colour || this.#rainbowColors[i]);\r\n        })\r\n    }\r\n\r\n    drawCircularArcs(curve, colour) {\r\n        curve.carcs.forEach((arc, i) => this.drawArc(arc, colour || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawArc(arc, colour) {\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(arc.x, arc.y);\r\n        this.ctx.arc(arc.x, arc.y, arc.r, arc.s, arc.e);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawScaledCurve(curve, colour = \"black\") {\r\n        this.drawReducedCurve(curve.redc, colour);\r\n        for (var k = 0; k <= 6; k++) {\r\n            this.drawCurve(curve.scaled[k], colour);\r\n        }\r\n    }\r\n\r\n    drawOutline(curve, colour = \"red\") {\r\n        curve.outl.curves.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawShapedOutline(curve, colour = \"red\", fill) {\r\n        curve.shapeoutl.forEach((s, i) => this.drawShape(s, colour, fill || this.#shadeColors[i]));\r\n    }\r\n\r\n    drawShape(shape, colour, fill) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fill;\r\n        var order = shape.forward.points.length - 1;\r\n        var scl = shape.startcap.points.length;\r\n        var ecl = shape.endcap.points.length;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(\r\n            shape.startcap.points[0].x,\r\n            shape.startcap.points[0].y\r\n        );\r\n        this.ctx.lineTo(\r\n            shape.startcap.points[scl - 1].x,\r\n            shape.startcap.points[scl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y,\r\n                shape.forward.points[3].x,\r\n                shape.forward.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y\r\n            );\r\n        }\r\n        this.ctx.lineTo(\r\n            shape.endcap.points[ecl - 1].x,\r\n            shape.endcap.points[ecl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y,\r\n                shape.back.points[3].x,\r\n                shape.back.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y\r\n            );\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawSelfIntersection(curve, r = 4, colour = \"red\") {\r\n        if (curve.order == 2) return\r\n        curve.intersections.self.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = curve.get(t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawLineIntersection(curve, r = 4, colour = \"red\") {\r\n        curve.intersections.line.forEach(t => {\r\n            var point = curve.get(t);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n\r\n    drawCurvesIntersection(curve, r = 4, colour = \"red\") {\r\n        curve.intersections.curve.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = curve.get(t[0]);\r\n            this.drawPoint(point, r, colour, \"white\");\r\n        })\r\n    }\r\n}"],"names":[],"mappings":"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"}