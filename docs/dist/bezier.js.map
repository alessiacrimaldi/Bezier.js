{"version":3,"file":"bezier.js","sources":["../../lib/bezier.js"],"sourcesContent":["/**\r\n  A javascript Bezier curve library\r\n**/\r\n\r\n// math-inlining.\r\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\r\n\r\n// cube root function yielding real roots\r\nfunction crt(v) {\r\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\r\n}\r\n\r\n// trig constants\r\nconst pi = Math.PI,\r\n  tau = 2 * pi,\r\n  quart = pi / 2,\r\n  // float precision significant decimal\r\n  epsilon = 0.000001,\r\n  // extremas used in bbox calculation and similar algorithms\r\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n  // a zero coordinate, which is surprisingly useful\r\n  ZERO = { x: 0, y: 0, z: 0 };\r\n\r\n// Bezier utility functions\r\nconst utils = {\r\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\r\n  Tvalues: [\r\n    -0.0640568928626056260850430826247450385909,\r\n    0.0640568928626056260850430826247450385909,\r\n    -0.1911188674736163091586398207570696318404,\r\n    0.1911188674736163091586398207570696318404,\r\n    -0.3150426796961633743867932913198102407864,\r\n    0.3150426796961633743867932913198102407864,\r\n    -0.4337935076260451384870842319133497124524,\r\n    0.4337935076260451384870842319133497124524,\r\n    -0.5454214713888395356583756172183723700107,\r\n    0.5454214713888395356583756172183723700107,\r\n    -0.6480936519369755692524957869107476266696,\r\n    0.6480936519369755692524957869107476266696,\r\n    -0.7401241915785543642438281030999784255232,\r\n    0.7401241915785543642438281030999784255232,\r\n    -0.8200019859739029219539498726697452080761,\r\n    0.8200019859739029219539498726697452080761,\r\n    -0.8864155270044010342131543419821967550873,\r\n    0.8864155270044010342131543419821967550873,\r\n    -0.9382745520027327585236490017087214496548,\r\n    0.9382745520027327585236490017087214496548,\r\n    -0.9747285559713094981983919930081690617411,\r\n    0.9747285559713094981983919930081690617411,\r\n    -0.9951872199970213601799974097007368118745,\r\n    0.9951872199970213601799974097007368118745,\r\n  ],\r\n\r\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\r\n  Cvalues: [\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.121670472927803391204463153476262425607,\r\n    0.121670472927803391204463153476262425607,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.086190161531953275917185202983742667185,\r\n    0.086190161531953275917185202983742667185,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0123412297999871995468056670700372915759,\r\n    0.0123412297999871995468056670700372915759,\r\n  ],\r\n\r\n  arcfn: function (t, derivativeFn) {\r\n    const d = derivativeFn(t);\r\n    let l = d.x * d.x + d.y * d.y;\r\n    if (typeof d.z !== \"undefined\") {\r\n      l += d.z * d.z;\r\n    }\r\n    return sqrt(l);\r\n  },\r\n\r\n  compute: function (t, points, _3d) {\r\n    // shortcuts\r\n    if (t === 0) {\r\n      points[0].t = 0;\r\n      return points[0];\r\n    }\r\n\r\n    const order = points.length - 1;\r\n\r\n    if (t === 1) {\r\n      points[order].t = 1;\r\n      return points[order];\r\n    }\r\n\r\n    const mt = 1 - t;\r\n    let p = points;\r\n\r\n    // constant?\r\n    if (order === 0) {\r\n      points[0].t = t;\r\n      return points[0];\r\n    }\r\n\r\n    // linear?\r\n    if (order === 1) {\r\n      const ret = {\r\n        x: mt * p[0].x + t * p[1].x,\r\n        y: mt * p[0].y + t * p[1].y,\r\n        t: t,\r\n      };\r\n      if (_3d) {\r\n        ret.z = mt * p[0].z + t * p[1].z;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // quadratic/cubic curve?\r\n    if (order < 4) {\r\n      let mt2 = mt * mt,\r\n        t2 = t * t,\r\n        a,\r\n        b,\r\n        c,\r\n        d = 0;\r\n      if (order === 2) {\r\n        p = [p[0], p[1], p[2], ZERO];\r\n        a = mt2;\r\n        b = mt * t * 2;\r\n        c = t2;\r\n      } else if (order === 3) {\r\n        a = mt2 * mt;\r\n        b = mt2 * t * 3;\r\n        c = mt * t2 * 3;\r\n        d = t * t2;\r\n      }\r\n      const ret = {\r\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\r\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\r\n        t: t,\r\n      };\r\n      if (_3d) {\r\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // higher order curves: use de Casteljau's computation\r\n    const dCpts = JSON.parse(JSON.stringify(points));\r\n    while (dCpts.length > 1) {\r\n      for (let i = 0; i < dCpts.length - 1; i++) {\r\n        dCpts[i] = {\r\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\r\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\r\n        };\r\n        if (typeof dCpts[i].z !== \"undefined\") {\r\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\r\n        }\r\n      }\r\n      dCpts.splice(dCpts.length - 1, 1);\r\n    }\r\n    dCpts[0].t = t;\r\n    return dCpts[0];\r\n  },\r\n\r\n  computeWithRatios: function (t, points, ratios, _3d) {\r\n    const mt = 1 - t,\r\n      r = ratios,\r\n      p = points;\r\n\r\n    let f1 = r[0],\r\n      f2 = r[1],\r\n      f3 = r[2],\r\n      f4 = r[3],\r\n      d;\r\n\r\n    // spec for linear\r\n    f1 *= mt;\r\n    f2 *= t;\r\n\r\n    if (p.length === 2) {\r\n      d = f1 + f2;\r\n      return {\r\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\r\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\r\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\r\n        t: t,\r\n      };\r\n    }\r\n\r\n    // upgrade to quadratic\r\n    f1 *= mt;\r\n    f2 *= 2 * mt;\r\n    f3 *= t * t;\r\n\r\n    if (p.length === 3) {\r\n      d = f1 + f2 + f3;\r\n      return {\r\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\r\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\r\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\r\n        t: t,\r\n      };\r\n    }\r\n\r\n    // upgrade to cubic\r\n    f1 *= mt;\r\n    f2 *= 1.5 * mt;\r\n    f3 *= 3 * mt;\r\n    f4 *= t * t * t;\r\n\r\n    if (p.length === 4) {\r\n      d = f1 + f2 + f3 + f4;\r\n      return {\r\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\r\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\r\n        z: !_3d\r\n          ? false\r\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\r\n        t: t,\r\n      };\r\n    }\r\n  },\r\n\r\n  derive: function (points, _3d) {\r\n    const dpoints = [];\r\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\r\n      const list = [];\r\n      for (let j = 0, dpt; j < c; j++) {\r\n        dpt = {\r\n          x: c * (p[j + 1].x - p[j].x),\r\n          y: c * (p[j + 1].y - p[j].y),\r\n        };\r\n        if (_3d) {\r\n          dpt.z = c * (p[j + 1].z - p[j].z);\r\n        }\r\n        list.push(dpt);\r\n      }\r\n      dpoints.push(list);\r\n      p = list;\r\n    }\r\n    return dpoints;\r\n  },\r\n\r\n  between: function (v, m, M) {\r\n    return (\r\n      (m <= v && v <= M) ||\r\n      utils.approximately(v, m) ||\r\n      utils.approximately(v, M)\r\n    );\r\n  },\r\n\r\n  approximately: function (a, b, precision) {\r\n    return abs(a - b) <= (precision || epsilon);\r\n  },\r\n\r\n  length: function (derivativeFn) {\r\n    const z = 0.5,\r\n      len = utils.Tvalues.length;\r\n\r\n    let sum = 0;\r\n\r\n    for (let i = 0, t; i < len; i++) {\r\n      t = z * utils.Tvalues[i] + z;\r\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\r\n    }\r\n    return z * sum;\r\n  },\r\n\r\n  map: function (v, ds, de, ts, te) {\r\n    const d1 = de - ds,\r\n      d2 = te - ts,\r\n      v2 = v - ds,\r\n      r = v2 / d1;\r\n    return ts + d2 * r;\r\n  },\r\n\r\n  lerp: function (r, v1, v2) {\r\n    const ret = {\r\n      x: v1.x + r * (v2.x - v1.x),\r\n      y: v1.y + r * (v2.y - v1.y),\r\n    };\r\n    if (v1.z !== undefined && v2.z !== undefined) {\r\n      ret.z = v1.z + r * (v2.z - v1.z);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  pointToString: function (p) {\r\n    let s = p.x + \"/\" + p.y;\r\n    if (typeof p.z !== \"undefined\") {\r\n      s += \"/\" + p.z;\r\n    }\r\n    return s;\r\n  },\r\n\r\n  pointsToString: function (points) {\r\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\r\n  },\r\n\r\n  copy: function (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  },\r\n\r\n  angle: function (o, v1, v2) {\r\n    const dx1 = v1.x - o.x,\r\n      dy1 = v1.y - o.y,\r\n      dx2 = v2.x - o.x,\r\n      dy2 = v2.y - o.y,\r\n      cross = dx1 * dy2 - dy1 * dx2,\r\n      dot = dx1 * dx2 + dy1 * dy2;\r\n    return atan2(cross, dot);\r\n  },\r\n\r\n  // round as string, to avoid rounding errors\r\n  round: function (v, d) {\r\n    const s = \"\" + v;\r\n    const pos = s.indexOf(\".\");\r\n    return parseFloat(s.substring(0, pos + 1 + d));\r\n  },\r\n\r\n  dist: function (p1, p2) {\r\n    const dx = p1.x - p2.x,\r\n      dy = p1.y - p2.y;\r\n    return sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  closest: function (LUT, point) {\r\n    let mdist = pow(2, 63),\r\n      mpos,\r\n      d;\r\n    LUT.forEach(function (p, idx) {\r\n      d = utils.dist(point, p);\r\n      if (d < mdist) {\r\n        mdist = d;\r\n        mpos = idx;\r\n      }\r\n    });\r\n    return { mdist: mdist, mpos: mpos };\r\n  },\r\n\r\n  abcratio: function (t, n) {\r\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\r\n    if (n !== 2 && n !== 3) {\r\n      return false;\r\n    }\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    } else if (t === 0 || t === 1) {\r\n      return t;\r\n    }\r\n    const bottom = pow(t, n) + pow(1 - t, n),\r\n      top = bottom - 1;\r\n    return abs(top / bottom);\r\n  },\r\n\r\n  projectionratio: function (t, n) {\r\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\r\n    if (n !== 2 && n !== 3) {\r\n      return false;\r\n    }\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    } else if (t === 0 || t === 1) {\r\n      return t;\r\n    }\r\n    const top = pow(1 - t, n),\r\n      bottom = pow(t, n) + top;\r\n    return top / bottom;\r\n  },\r\n\r\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\r\n    const nx =\r\n      (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\r\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\r\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n    if (d == 0) {\r\n      return false;\r\n    }\r\n    return { x: nx / d, y: ny / d };\r\n  },\r\n\r\n  lli4: function (p1, p2, p3, p4) {\r\n    const x1 = p1.x,\r\n      y1 = p1.y,\r\n      x2 = p2.x,\r\n      y2 = p2.y,\r\n      x3 = p3.x,\r\n      y3 = p3.y,\r\n      x4 = p4.x,\r\n      y4 = p4.y;\r\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\r\n  },\r\n\r\n  lli: function (v1, v2) {\r\n    return utils.lli4(v1, v1.c, v2, v2.c);\r\n  },\r\n\r\n  makeline: function (p1, p2) {\r\n    return new Bezier(\r\n      p1.x,\r\n      p1.y,\r\n      (p1.x + p2.x) / 2,\r\n      (p1.y + p2.y) / 2,\r\n      p2.x,\r\n      p2.y\r\n    );\r\n  },\r\n\r\n  findbbox: function (sections) {\r\n    let mx = nMax,\r\n      my = nMax,\r\n      MX = nMin,\r\n      MY = nMin;\r\n    sections.forEach(function (s) {\r\n      const bbox = s.bbox();\r\n      if (mx > bbox.x.min) mx = bbox.x.min;\r\n      if (my > bbox.y.min) my = bbox.y.min;\r\n      if (MX < bbox.x.max) MX = bbox.x.max;\r\n      if (MY < bbox.y.max) MY = bbox.y.max;\r\n    });\r\n    return {\r\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\r\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\r\n    };\r\n  },\r\n\r\n  shapeintersections: function (\r\n    s1,\r\n    bbox1,\r\n    s2,\r\n    bbox2,\r\n    curveIntersectionThreshold\r\n  ) {\r\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\r\n    const intersections = [];\r\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\r\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\r\n    a1.forEach(function (l1) {\r\n      if (l1.virtual) return;\r\n      a2.forEach(function (l2) {\r\n        if (l2.virtual) return;\r\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\r\n        if (iss.length > 0) {\r\n          iss.c1 = l1;\r\n          iss.c2 = l2;\r\n          iss.s1 = s1;\r\n          iss.s2 = s2;\r\n          intersections.push(iss);\r\n        }\r\n      });\r\n    });\r\n    return intersections;\r\n  },\r\n\r\n  makeshape: function (forward, back, curveIntersectionThreshold) {\r\n    const bpl = back.points.length;\r\n    const fpl = forward.points.length;\r\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\r\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\r\n    const shape = {\r\n      startcap: start,\r\n      forward: forward,\r\n      back: back,\r\n      endcap: end,\r\n      bbox: utils.findbbox([start, forward, back, end]),\r\n    };\r\n    shape.intersections = function (s2) {\r\n      return utils.shapeintersections(\r\n        shape,\r\n        shape.bbox,\r\n        s2,\r\n        s2.bbox,\r\n        curveIntersectionThreshold\r\n      );\r\n    };\r\n    return shape;\r\n  },\r\n\r\n  getminmax: function (curve, d, list) {\r\n    if (!list) return { min: 0, max: 0 };\r\n    let min = nMax,\r\n      max = nMin,\r\n      t,\r\n      c;\r\n    if (list.indexOf(0) === -1) {\r\n      list = [0].concat(list);\r\n    }\r\n    if (list.indexOf(1) === -1) {\r\n      list.push(1);\r\n    }\r\n    for (let i = 0, len = list.length; i < len; i++) {\r\n      t = list[i];\r\n      c = curve.get(t);\r\n      if (c[d] < min) {\r\n        min = c[d];\r\n      }\r\n      if (c[d] > max) {\r\n        max = c[d];\r\n      }\r\n    }\r\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\r\n  },\r\n\r\n  align: function (points, line) {\r\n    const tx = line.p1.x,\r\n      ty = line.p1.y,\r\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\r\n      d = function (v) {\r\n        return {\r\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\r\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\r\n        };\r\n      };\r\n    return points.map(d);\r\n  },\r\n\r\n  roots: function (points, line) {\r\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\r\n\r\n    const order = points.length - 1;\r\n    const aligned = utils.align(points, line);\r\n    const reduce = function (t) {\r\n      return 0 <= t && t <= 1;\r\n    };\r\n\r\n    if (order === 2) {\r\n      const a = aligned[0].y,\r\n        b = aligned[1].y,\r\n        c = aligned[2].y,\r\n        d = a - 2 * b + c;\r\n      if (d !== 0) {\r\n        const m1 = -sqrt(b * b - a * c),\r\n          m2 = -a + b,\r\n          v1 = -(m1 + m2) / d,\r\n          v2 = -(-m1 + m2) / d;\r\n        return [v1, v2].filter(reduce);\r\n      } else if (b !== c && d === 0) {\r\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\r\n      }\r\n      return [];\r\n    }\r\n\r\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\r\n    const pa = aligned[0].y,\r\n      pb = aligned[1].y,\r\n      pc = aligned[2].y,\r\n      pd = aligned[3].y;\r\n\r\n    let d = -pa + 3 * pb - 3 * pc + pd,\r\n      a = 3 * pa - 6 * pb + 3 * pc,\r\n      b = -3 * pa + 3 * pb,\r\n      c = pa;\r\n\r\n    if (utils.approximately(d, 0)) {\r\n      // this is not a cubic curve.\r\n      if (utils.approximately(a, 0)) {\r\n        // in fact, this is not a quadratic curve either.\r\n        if (utils.approximately(b, 0)) {\r\n          // in fact in fact, there are no solutions.\r\n          return [];\r\n        }\r\n        // linear solution:\r\n        return [-c / b].filter(reduce);\r\n      }\r\n      // quadratic solution:\r\n      const q = sqrt(b * b - 4 * a * c),\r\n        a2 = 2 * a;\r\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\r\n    }\r\n\r\n    // at this point, we know we need a cubic solution:\r\n\r\n    a /= d;\r\n    b /= d;\r\n    c /= d;\r\n\r\n    const p = (3 * b - a * a) / 3,\r\n      p3 = p / 3,\r\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\r\n      q2 = q / 2,\r\n      discriminant = q2 * q2 + p3 * p3 * p3;\r\n\r\n    let u1, v1, x1, x2, x3;\r\n    if (discriminant < 0) {\r\n      const mp3 = -p / 3,\r\n        mp33 = mp3 * mp3 * mp3,\r\n        r = sqrt(mp33),\r\n        t = -q / (2 * r),\r\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\r\n        phi = acos(cosphi),\r\n        crtr = crt(r),\r\n        t1 = 2 * crtr;\r\n      x1 = t1 * cos(phi / 3) - a / 3;\r\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\r\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\r\n      return [x1, x2, x3].filter(reduce);\r\n    } else if (discriminant === 0) {\r\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\r\n      x1 = 2 * u1 - a / 3;\r\n      x2 = -u1 - a / 3;\r\n      return [x1, x2].filter(reduce);\r\n    } else {\r\n      const sd = sqrt(discriminant);\r\n      u1 = crt(-q2 + sd);\r\n      v1 = crt(q2 + sd);\r\n      return [u1 - v1 - a / 3].filter(reduce);\r\n    }\r\n  },\r\n\r\n  droots: function (p) {\r\n    // quadratic roots are easy\r\n    if (p.length === 3) {\r\n      const a = p[0],\r\n        b = p[1],\r\n        c = p[2],\r\n        d = a - 2 * b + c;\r\n      if (d !== 0) {\r\n        const m1 = -sqrt(b * b - a * c),\r\n          m2 = -a + b,\r\n          v1 = -(m1 + m2) / d,\r\n          v2 = -(-m1 + m2) / d;\r\n        return [v1, v2];\r\n      } else if (b !== c && d === 0) {\r\n        return [(2 * b - c) / (2 * (b - c))];\r\n      }\r\n      return [];\r\n    }\r\n\r\n    // linear roots are even easier\r\n    if (p.length === 2) {\r\n      const a = p[0],\r\n        b = p[1];\r\n      if (a !== b) {\r\n        return [a / (a - b)];\r\n      }\r\n      return [];\r\n    }\r\n\r\n    return [];\r\n  },\r\n\r\n  curvature: function (t, d1, d2, _3d, kOnly) {\r\n    let num,\r\n      dnm,\r\n      adk,\r\n      dk,\r\n      k = 0,\r\n      r = 0;\r\n\r\n    //\r\n    // We're using the following formula for curvature:\r\n    //\r\n    //              x'y\" - y'x\"\r\n    //   k(t) = ------------------\r\n    //           (x'² + y'²)^(3/2)\r\n    //\r\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\r\n    //\r\n    // With it corresponding 3D counterpart:\r\n    //\r\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\r\n    //   k(t) = -------------------------------------------------------\r\n    //                     (x'² + y'² + z'²)^(3/2)\r\n    //\r\n\r\n    const d = utils.compute(t, d1);\r\n    const dd = utils.compute(t, d2);\r\n    const qdsum = d.x * d.x + d.y * d.y;\r\n\r\n    if (_3d) {\r\n      num = sqrt(\r\n        pow(d.y * dd.z - dd.y * d.z, 2) +\r\n        pow(d.z * dd.x - dd.z * d.x, 2) +\r\n        pow(d.x * dd.y - dd.x * d.y, 2)\r\n      );\r\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\r\n    } else {\r\n      num = d.x * dd.y - d.y * dd.x;\r\n      dnm = pow(qdsum, 3 / 2);\r\n    }\r\n\r\n    if (num === 0 || dnm === 0) {\r\n      return { k: 0, r: 0 };\r\n    }\r\n\r\n    k = num / dnm;\r\n    r = dnm / num;\r\n\r\n    // We're also computing the derivative of kappa, because\r\n    // there is value in knowing the rate of change for the\r\n    // curvature along the curve. And we're just going to\r\n    // ballpark it based on an epsilon.\r\n    if (!kOnly) {\r\n      // compute k'(t) based on the interval before, and after it,\r\n      // to at least try to not introduce forward/backward pass bias.\r\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\r\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\r\n      dk = (nk - k + (k - pk)) / 2;\r\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\r\n    }\r\n\r\n    return { k: k, r: r, dk: dk, adk: adk };\r\n  },\r\n\r\n  inflections: function (points) {\r\n    if (points.length < 4) return [];\r\n\r\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\r\n\r\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\r\n      a = p[2].x * p[1].y,\r\n      b = p[3].x * p[1].y,\r\n      c = p[1].x * p[2].y,\r\n      d = p[3].x * p[2].y,\r\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\r\n      v2 = 18 * (3 * a - b - 3 * c),\r\n      v3 = 18 * (c - a);\r\n\r\n    if (utils.approximately(v1, 0)) {\r\n      if (!utils.approximately(v2, 0)) {\r\n        let t = -v3 / v2;\r\n        if (0 <= t && t <= 1) return [t];\r\n      }\r\n      return [];\r\n    }\r\n\r\n    const trm = v2 * v2 - 4 * v1 * v3,\r\n      sq = Math.sqrt(trm),\r\n      d2 = 2 * v1;\r\n\r\n    if (utils.approximately(d2, 0)) return [];\r\n\r\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\r\n      return 0 <= r && r <= 1;\r\n    });\r\n  },\r\n\r\n  bboxoverlap: function (b1, b2) {\r\n    const dims = [\"x\", \"y\"],\r\n      len = dims.length;\r\n\r\n    for (let i = 0, dim, l, t, d; i < len; i++) {\r\n      dim = dims[i];\r\n      l = b1[dim].mid;\r\n      t = b2[dim].mid;\r\n      d = (b1[dim].size + b2[dim].size) / 2;\r\n      if (abs(l - t) >= d) return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  expandbox: function (bbox, _bbox) {\r\n    if (_bbox.x.min < bbox.x.min) {\r\n      bbox.x.min = _bbox.x.min;\r\n    }\r\n    if (_bbox.y.min < bbox.y.min) {\r\n      bbox.y.min = _bbox.y.min;\r\n    }\r\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\r\n      bbox.z.min = _bbox.z.min;\r\n    }\r\n    if (_bbox.x.max > bbox.x.max) {\r\n      bbox.x.max = _bbox.x.max;\r\n    }\r\n    if (_bbox.y.max > bbox.y.max) {\r\n      bbox.y.max = _bbox.y.max;\r\n    }\r\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\r\n      bbox.z.max = _bbox.z.max;\r\n    }\r\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\r\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\r\n    if (bbox.z) {\r\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\r\n    }\r\n    bbox.x.size = bbox.x.max - bbox.x.min;\r\n    bbox.y.size = bbox.y.max - bbox.y.min;\r\n    if (bbox.z) {\r\n      bbox.z.size = bbox.z.max - bbox.z.min;\r\n    }\r\n  },\r\n\r\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\r\n    const c1b = c1.bbox(),\r\n      c2b = c2.bbox(),\r\n      r = 100000,\r\n      threshold = curveIntersectionThreshold || 0.5;\r\n\r\n    if (\r\n      c1b.x.size + c1b.y.size < threshold &&\r\n      c2b.x.size + c2b.y.size < threshold\r\n    ) {\r\n      return [\r\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\r\n        \"/\" +\r\n        (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\r\n      ];\r\n    }\r\n\r\n    let cc1 = c1.split(0.5),\r\n      cc2 = c2.split(0.5),\r\n      pairs = [\r\n        { left: cc1.left, right: cc2.left },\r\n        { left: cc1.left, right: cc2.right },\r\n        { left: cc1.right, right: cc2.right },\r\n        { left: cc1.right, right: cc2.left },\r\n      ];\r\n\r\n    pairs = pairs.filter(function (pair) {\r\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\r\n    });\r\n\r\n    let results = [];\r\n\r\n    if (pairs.length === 0) return results;\r\n\r\n    pairs.forEach(function (pair) {\r\n      results = results.concat(\r\n        utils.pairiteration(pair.left, pair.right, threshold)\r\n      );\r\n    });\r\n\r\n    results = results.filter(function (v, i) {\r\n      return results.indexOf(v) === i;\r\n    });\r\n\r\n    return results;\r\n  },\r\n\r\n  getccenter: function (p1, p2, p3) {\r\n    const dx1 = p2.x - p1.x,\r\n      dy1 = p2.y - p1.y,\r\n      dx2 = p3.x - p2.x,\r\n      dy2 = p3.y - p2.y,\r\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\r\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\r\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\r\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\r\n      // chord midpoints\r\n      mx1 = (p1.x + p2.x) / 2,\r\n      my1 = (p1.y + p2.y) / 2,\r\n      mx2 = (p2.x + p3.x) / 2,\r\n      my2 = (p2.y + p3.y) / 2,\r\n      // midpoint offsets\r\n      mx1n = mx1 + dx1p,\r\n      my1n = my1 + dy1p,\r\n      mx2n = mx2 + dx2p,\r\n      my2n = my2 + dy2p,\r\n      // intersection of these lines:\r\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\r\n      r = utils.dist(arc, p1);\r\n\r\n    // arc start/end values, over mid point:\r\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\r\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\r\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\r\n      _;\r\n\r\n    // determine arc direction (cw/ccw correction)\r\n    if (s < e) {\r\n      // if s<m<e, arc(s, e)\r\n      // if m<s<e, arc(e, s + tau)\r\n      // if s<e<m, arc(e, s + tau)\r\n      if (s > m || m > e) {\r\n        s += tau;\r\n      }\r\n      if (s > e) {\r\n        _ = e;\r\n        e = s;\r\n        s = _;\r\n      }\r\n    } else {\r\n      // if e<m<s, arc(e, s)\r\n      // if m<e<s, arc(s, e + tau)\r\n      // if e<s<m, arc(s, e + tau)\r\n      if (e < m && m < s) {\r\n        _ = e;\r\n        e = s;\r\n        s = _;\r\n      } else {\r\n        e += tau;\r\n      }\r\n    }\r\n    // assign and done.\r\n    arc.s = s;\r\n    arc.e = e;\r\n    arc.r = r;\r\n    return arc;\r\n  },\r\n\r\n  numberSort: function (a, b) {\r\n    return a - b;\r\n  },\r\n\r\n  midpoint: function (p1, p2) {\r\n    const mpx = (p1.x + p2.x) / 2, mpy = (p1.y + p2.y) / 2;\r\n    return { x: mpx, y: mpy };\r\n  },\r\n\r\n  checkcoincidation: function (p1, p2) {\r\n    if (p1.x == p2.x && p1.y == p2.y) { return true };\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Poly Bezier\r\n * @param {[type]} curves [description]\r\n */\r\nclass PolyBezier {\r\n  constructor(curves) {\r\n    this.curves = [];\r\n    this._3d = false;\r\n    if (!!curves) {\r\n      this.curves = curves;\r\n      this._3d = this.curves[0]._3d;\r\n    }\r\n    this._closed = utils.checkcoincidation(this.lastPathPoint(), this.firstPathPoint());\r\n    this.setJoinC_0();\r\n  }\r\n\r\n  curve(idx) {\r\n    return this.curves[idx];\r\n  }\r\n\r\n  firstPathCurve() {\r\n    return this.curves[0];\r\n  }\r\n\r\n  firstPathPoint() {\r\n    return this.firstPathCurve().points[0];\r\n  }\r\n\r\n  lastPathCurve() {\r\n    return this.curves[this.curves.length - 1];\r\n  }\r\n\r\n  lastPathPoint() {\r\n    return this.lastPathCurve().lastPoint();\r\n  }\r\n\r\n  setJoinC_0() {\r\n    // if the initial point of a curve is not equal to the last point of the next curve,\r\n    // it becomes the midpoint between them.\r\n    for (let i = 0; i < this.curves.length - 1; i++) {\r\n      const curve1 = this.curve(i), curve2 = this.curve(i + 1);\r\n      const lp = curve1.lastPoint(), fp = curve2.points[0];\r\n      if (!utils.checkcoincidation(lp, fp)) {\r\n        const midpoint = utils.midpoint(lp, fp);\r\n        curve1.points[curve1.lastPointIdx()] = midpoint;\r\n        curve2.points[0] = midpoint;\r\n      }\r\n    }\r\n  }\r\n\r\n  closePath() {\r\n    // the first point of the first curve and the last point of the last curve,\r\n    // if they're not, become coincident with the midpoint value between them.\r\n    const lp = this.lastPathPoint(), fp = this.firstPathPoint();\r\n    if (!utils.checkcoincidation(lp, fp) && !this._closed) {\r\n      const firstCurve = this.firstPathCurve(), lastCurve = this.lastPathCurve();\r\n      const midpoint = utils.midpoint(lp, fp);\r\n      firstCurve.points[0] = midpoint;\r\n      lastCurve.points[lastCurve.lastPointIdx()] = midpoint;\r\n      this._closed = true;\r\n    } else return;\r\n  }\r\n\r\n  valueOf() {\r\n    return this.toString();\r\n  }\r\n\r\n  toString() {\r\n    return (\r\n      \"[\" +\r\n      this.curves\r\n        .map(function (curve) {\r\n          return utils.pointsToString(curve.points);\r\n        })\r\n        .join(\", \") +\r\n      \"]\"\r\n    );\r\n  }\r\n\r\n  addCurve(curve) {\r\n    this.curves.push(curve);\r\n    this._3d = this._3d || curve._3d;\r\n  }\r\n\r\n  length() {\r\n    return this.curves\r\n      .map(function (v) {\r\n        return v.length();\r\n      })\r\n      .reduce(function (a, b) {\r\n        return a + b;\r\n      });\r\n  }\r\n\r\n  bbox() {\r\n    const c = this.curves;\r\n    var bbox = c[0].bbox();\r\n    for (var i = 1; i < c.length; i++) {\r\n      utils.expandbox(bbox, c[i].bbox());\r\n    }\r\n    return bbox;\r\n  }\r\n\r\n  offset(d) {\r\n    const offset = [];\r\n    this.curves.forEach(function (v) {\r\n      offset.push(...v.offset(d));\r\n    });\r\n    return new PolyBezier(offset);\r\n  }\r\n}\r\n\r\n// math-inlining.\r\nconst { abs: abs$1, min, max, cos: cos$1, sin: sin$1, acos: acos$1, sqrt: sqrt$1 } = Math;\r\nconst pi$1 = Math.PI;\r\n\r\n/**\r\n * Bezier curve constructor.\r\n */\r\nclass Bezier {\r\n  constructor(coords) {\r\n    let args =\r\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\r\n    let coordlen = false;\r\n\r\n    if (typeof args[0] === \"object\") {\r\n      coordlen = args.length;\r\n      const newargs = [];\r\n      args.forEach(function (point) {\r\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\r\n          if (typeof point[d] !== \"undefined\") {\r\n            newargs.push(point[d]);\r\n          }\r\n        });\r\n      });\r\n      args = newargs;\r\n    }\r\n\r\n    let higher = false;\r\n    const len = args.length;\r\n\r\n    if (coordlen) {\r\n      if (coordlen > 4) {\r\n        if (arguments.length !== 1) {\r\n          throw new Error(\r\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\r\n          );\r\n        }\r\n        higher = true;\r\n      }\r\n    } else {\r\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\r\n        if (arguments.length !== 1) {\r\n          throw new Error(\r\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const _3d = (this._3d =\r\n      (!higher && (len === 9 || len === 12)) ||\r\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\r\n\r\n    const points = (this.points = []);\r\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\r\n      var point = {\r\n        x: args[idx],\r\n        y: args[idx + 1],\r\n      };\r\n      if (_3d) {\r\n        point.z = args[idx + 2];\r\n      }\r\n      points.push(point);\r\n    }\r\n    const order = (this.order = points.length - 1);\r\n\r\n    const dims = (this.dims = [\"x\", \"y\"]);\r\n    if (_3d) dims.push(\"z\");\r\n    this.dimlen = dims.length;\r\n\r\n    // is this curve, practically speaking, a straight line?\r\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\r\n    const baselength = utils.dist(points[0], points[order]);\r\n    this._linear = aligned.reduce((t, p) => t + abs$1(p.y), 0) < baselength / 50;\r\n\r\n    this._lut = [];\r\n\r\n    this._t1 = 0;\r\n    this._t2 = 1;\r\n    this.update();\r\n  }\r\n\r\n  static quadraticFromPoints(p1, p2, p3, t) {\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    }\r\n    // shortcuts, although they're really dumb\r\n    if (t === 0) {\r\n      return new Bezier(p2, p2, p3);\r\n    }\r\n    if (t === 1) {\r\n      return new Bezier(p1, p2, p2);\r\n    }\r\n    // real fitting.\r\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\r\n    return new Bezier(p1, abc.A, p3);\r\n  }\r\n\r\n  static cubicFromPoints(S, B, E, t, d1) {\r\n    if (typeof t === \"undefined\") {\r\n      t = 0.5;\r\n    }\r\n    const abc = Bezier.getABC(3, S, B, E, t);\r\n    if (typeof d1 === \"undefined\") {\r\n      d1 = utils.dist(B, abc.C);\r\n    }\r\n    const d2 = (d1 * (1 - t)) / t;\r\n\r\n    const selen = utils.dist(S, E),\r\n      lx = (E.x - S.x) / selen,\r\n      ly = (E.y - S.y) / selen,\r\n      bx1 = d1 * lx,\r\n      by1 = d1 * ly,\r\n      bx2 = d2 * lx,\r\n      by2 = d2 * ly;\r\n    // derivation of new hull coordinates\r\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\r\n      e2 = { x: B.x + bx2, y: B.y + by2 },\r\n      A = abc.A,\r\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\r\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\r\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\r\n      nc2 = {\r\n        x: E.x + (v2.x - E.x) / (1 - t),\r\n        y: E.y + (v2.y - E.y) / (1 - t),\r\n      };\r\n    // ...done\r\n    return new Bezier(S, nc1, nc2, E);\r\n  }\r\n\r\n  static getUtils() {\r\n    return utils;\r\n  }\r\n\r\n  getUtils() {\r\n    return Bezier.getUtils();\r\n  }\r\n\r\n  lastPointIdx() {\r\n    return this.points.length - 1;\r\n  }\r\n\r\n  lastPoint() {\r\n    return this.points[this.lastPointIdx()];\r\n  }\r\n\r\n  static get PolyBezier() {\r\n    return PolyBezier;\r\n  }\r\n\r\n  valueOf() {\r\n    return this.toString();\r\n  }\r\n\r\n  toString() {\r\n    return utils.pointsToString(this.points);\r\n  }\r\n\r\n  toSVG() {\r\n    if (this._3d) return false;\r\n    const p = this.points,\r\n      x = p[0].x,\r\n      y = p[0].y,\r\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\r\n    for (let i = 1, last = p.length; i < last; i++) {\r\n      s.push(p[i].x);\r\n      s.push(p[i].y);\r\n    }\r\n    return s.join(\" \");\r\n  }\r\n\r\n  setRatios(ratios) {\r\n    if (ratios.length !== this.points.length) {\r\n      throw new Error(\"incorrect number of ratio values\");\r\n    }\r\n    this.ratios = ratios;\r\n    this._lut = []; //  invalidate any precomputed LUT\r\n  }\r\n\r\n  verify() {\r\n    const print = this.coordDigest();\r\n    if (print !== this._print) {\r\n      this._print = print;\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  coordDigest() {\r\n    return this.points\r\n      .map(function (c, pos) {\r\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\r\n      })\r\n      .join(\"\");\r\n  }\r\n\r\n  update() {\r\n    // invalidate any precomputed LUT\r\n    this._lut = [];\r\n    this.dpoints = utils.derive(this.points, this._3d);\r\n    this.computedirection();\r\n  }\r\n\r\n  computedirection() {\r\n    const points = this.points;\r\n    const angle = utils.angle(points[0], points[this.order], points[1]);\r\n    this.clockwise = angle > 0;\r\n  }\r\n\r\n  length() {\r\n    return utils.length(this.derivative.bind(this));\r\n  }\r\n\r\n  static getABC(order = 2, S, B, E, t = 0.5) {\r\n    const u = utils.projectionratio(t, order),\r\n      um = 1 - u,\r\n      C = {\r\n        x: u * S.x + um * E.x,\r\n        y: u * S.y + um * E.y,\r\n      },\r\n      s = utils.abcratio(t, order),\r\n      A = {\r\n        x: B.x + (B.x - C.x) / s,\r\n        y: B.y + (B.y - C.y) / s,\r\n      };\r\n    return { A, B, C, S, E };\r\n  }\r\n\r\n  getABC(t, B) {\r\n    B = B || this.get(t);\r\n    let S = this.points[0];\r\n    let E = this.points[this.order];\r\n    return Bezier.getABC(this.order, S, B, E, t);\r\n  }\r\n\r\n  getLUT(steps) {\r\n    this.verify();\r\n    steps = steps || 100;\r\n    if (this._lut.length === steps) {\r\n      return this._lut;\r\n    }\r\n    this._lut = [];\r\n    // n steps means n+1 points\r\n    steps++;\r\n    this._lut = [];\r\n    for (let i = 0, p, t; i < steps; i++) {\r\n      t = i / (steps - 1);\r\n      p = this.compute(t);\r\n      p.t = t;\r\n      this._lut.push(p);\r\n    }\r\n    return this._lut;\r\n  }\r\n\r\n  on(point, error) {\r\n    error = error || 5;\r\n    const lut = this.getLUT(),\r\n      hits = [];\r\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\r\n      c = lut[i];\r\n      if (utils.dist(c, point) < error) {\r\n        hits.push(c);\r\n        t += i / lut.length;\r\n      }\r\n    }\r\n    if (!hits.length) return false;\r\n    return (t /= hits.length);\r\n  }\r\n\r\n  project(point) {\r\n    // step 1: coarse check\r\n    const LUT = this.getLUT(),\r\n      l = LUT.length - 1,\r\n      closest = utils.closest(LUT, point),\r\n      mpos = closest.mpos,\r\n      t1 = (mpos - 1) / l,\r\n      t2 = (mpos + 1) / l,\r\n      step = 0.1 / l;\r\n\r\n    // step 2: fine check\r\n    let mdist = closest.mdist,\r\n      t = t1,\r\n      ft = t,\r\n      p;\r\n    mdist += 1;\r\n    for (let d; t < t2 + step; t += step) {\r\n      p = this.compute(t);\r\n      d = utils.dist(point, p);\r\n      if (d < mdist) {\r\n        mdist = d;\r\n        ft = t;\r\n      }\r\n    }\r\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\r\n    p = this.compute(ft);\r\n    p.t = ft;\r\n    p.d = mdist;\r\n    return p;\r\n  }\r\n\r\n  get(t) {\r\n    return this.compute(t);\r\n  }\r\n\r\n  point(idx) {\r\n    return this.points[idx];\r\n  }\r\n\r\n  compute(t) {\r\n    if (this.ratios) {\r\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\r\n    }\r\n    return utils.compute(t, this.points, this._3d, this.ratios);\r\n  }\r\n\r\n  raise() {\r\n    const p = this.points,\r\n      np = [p[0]],\r\n      k = p.length;\r\n    for (let i = 1, pi, pim; i < k; i++) {\r\n      pi = p[i];\r\n      pim = p[i - 1];\r\n      np[i] = {\r\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\r\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\r\n      };\r\n    }\r\n    np[k] = p[k - 1];\r\n    return new Bezier(np);\r\n  }\r\n\r\n  derivative(t) {\r\n    return utils.compute(t, this.dpoints[0], this._3d);\r\n  }\r\n\r\n  dderivative(t) {\r\n    return utils.compute(t, this.dpoints[1], this._3d);\r\n  }\r\n\r\n  align() {\r\n    let p = this.points;\r\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\r\n  }\r\n\r\n  curvature(t) {\r\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\r\n  }\r\n\r\n  inflections() {\r\n    return utils.inflections(this.points);\r\n  }\r\n\r\n  normal(t) {\r\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\r\n  }\r\n\r\n  __normal2(t) {\r\n    const d = this.derivative(t);\r\n    const q = sqrt$1(d.x * d.x + d.y * d.y);\r\n    return { x: -d.y / q, y: d.x / q };\r\n  }\r\n\r\n  __normal3(t) {\r\n    // see http://stackoverflow.com/questions/25453159\r\n    const r1 = this.derivative(t),\r\n      r2 = this.derivative(t + 0.01),\r\n      q1 = sqrt$1(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\r\n      q2 = sqrt$1(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\r\n    r1.x /= q1;\r\n    r1.y /= q1;\r\n    r1.z /= q1;\r\n    r2.x /= q2;\r\n    r2.y /= q2;\r\n    r2.z /= q2;\r\n    // cross product\r\n    const c = {\r\n      x: r2.y * r1.z - r2.z * r1.y,\r\n      y: r2.z * r1.x - r2.x * r1.z,\r\n      z: r2.x * r1.y - r2.y * r1.x,\r\n    };\r\n    const m = sqrt$1(c.x * c.x + c.y * c.y + c.z * c.z);\r\n    c.x /= m;\r\n    c.y /= m;\r\n    c.z /= m;\r\n    // rotation matrix\r\n    const R = [\r\n      c.x * c.x,\r\n      c.x * c.y - c.z,\r\n      c.x * c.z + c.y,\r\n      c.x * c.y + c.z,\r\n      c.y * c.y,\r\n      c.y * c.z - c.x,\r\n      c.x * c.z - c.y,\r\n      c.y * c.z + c.x,\r\n      c.z * c.z,\r\n    ];\r\n    // normal vector:\r\n    const n = {\r\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\r\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\r\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\r\n    };\r\n    return n;\r\n  }\r\n\r\n  hull(t) {\r\n    let p = this.points,\r\n      _p = [],\r\n      q = [],\r\n      idx = 0;\r\n    q[idx++] = p[0];\r\n    q[idx++] = p[1];\r\n    q[idx++] = p[2];\r\n    if (this.order === 3) {\r\n      q[idx++] = p[3];\r\n    }\r\n    // we lerp between all points at each iteration, until we have 1 point left.\r\n    while (p.length > 1) {\r\n      _p = [];\r\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\r\n        pt = utils.lerp(t, p[i], p[i + 1]);\r\n        q[idx++] = pt;\r\n        _p.push(pt);\r\n      }\r\n      p = _p;\r\n    }\r\n    return q;\r\n  }\r\n\r\n  split(t1, t2) {\r\n    // shortcuts\r\n    if (t1 === 0 && !!t2) {\r\n      return this.split(t2).left;\r\n    }\r\n    if (t2 === 1) {\r\n      return this.split(t1).right;\r\n    }\r\n\r\n    // no shortcut: use \"de Casteljau\" iteration.\r\n    const q = this.hull(t1);\r\n    const result = {\r\n      left:\r\n        this.order === 2\r\n          ? new Bezier([q[0], q[3], q[5]])\r\n          : new Bezier([q[0], q[4], q[7], q[9]]),\r\n      right:\r\n        this.order === 2\r\n          ? new Bezier([q[5], q[4], q[2]])\r\n          : new Bezier([q[9], q[8], q[6], q[3]]),\r\n      span: q,\r\n    };\r\n\r\n    // make sure we bind _t1/_t2 information!\r\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\r\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\r\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\r\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\r\n\r\n    // if we have no t2, we're done\r\n    if (!t2) {\r\n      return result;\r\n    }\r\n\r\n    // if we have a t2, split again:\r\n    t2 = utils.map(t2, t1, 1, 0, 1);\r\n    return result.right.split(t2).left;\r\n  }\r\n\r\n  extrema() {\r\n    const result = {};\r\n    let roots = [];\r\n\r\n    this.dims.forEach(\r\n      function (dim) {\r\n        let mfn = function (v) {\r\n          return v[dim];\r\n        };\r\n        let p = this.dpoints[0].map(mfn);\r\n        result[dim] = utils.droots(p);\r\n        if (this.order === 3) {\r\n          p = this.dpoints[1].map(mfn);\r\n          result[dim] = result[dim].concat(utils.droots(p));\r\n        }\r\n        result[dim] = result[dim].filter(function (t) {\r\n          return t >= 0 && t <= 1;\r\n        });\r\n        roots = roots.concat(result[dim].sort(utils.numberSort));\r\n      }.bind(this)\r\n    );\r\n\r\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\r\n      return roots.indexOf(v) === idx;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  bbox() {\r\n    const extrema = this.extrema(),\r\n      result = {};\r\n    this.dims.forEach(\r\n      function (d) {\r\n        result[d] = utils.getminmax(this, d, extrema[d]);\r\n      }.bind(this)\r\n    );\r\n    return result;\r\n  }\r\n\r\n  overlaps(curve) {\r\n    const lbbox = this.bbox(),\r\n      tbbox = curve.bbox();\r\n    return utils.bboxoverlap(lbbox, tbbox);\r\n  }\r\n\r\n  offset(t, d) {\r\n    if (typeof d !== \"undefined\") {\r\n      const c = this.get(t),\r\n        n = this.normal(t);\r\n      const ret = {\r\n        c: c,\r\n        n: n,\r\n        x: c.x + n.x * d,\r\n        y: c.y + n.y * d,\r\n      };\r\n      if (this._3d) {\r\n        ret.z = c.z + n.z * d;\r\n      }\r\n      return ret;\r\n    }\r\n    if (this._linear) {\r\n      const nv = this.normal(0),\r\n        coords = this.points.map(function (p) {\r\n          const ret = {\r\n            x: p.x + t * nv.x,\r\n            y: p.y + t * nv.y,\r\n          };\r\n          if (p.z && nv.z) {\r\n            ret.z = p.z + t * nv.z;\r\n          }\r\n          return ret;\r\n        });\r\n      return [new Bezier(coords)];\r\n    }\r\n    return this.reduce().map(function (s) {\r\n      if (s._linear) {\r\n        return s.offset(t)[0];\r\n      }\r\n      return s.scale(t);\r\n    });\r\n  }\r\n\r\n  simple() {\r\n    if (this.order === 3) {\r\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\r\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\r\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\r\n    }\r\n    const n1 = this.normal(0);\r\n    const n2 = this.normal(1);\r\n    let s = n1.x * n2.x + n1.y * n2.y;\r\n    if (this._3d) {\r\n      s += n1.z * n2.z;\r\n    }\r\n    return abs$1(acos$1(s)) < pi$1 / 3;\r\n  }\r\n\r\n  reduce() {\r\n    // TODO: examine these var types in more detail...\r\n    let i,\r\n      t1 = 0,\r\n      t2 = 0,\r\n      step = 0.01,\r\n      segment,\r\n      pass1 = [],\r\n      pass2 = [];\r\n    // first pass: split on extrema\r\n    let extrema = this.extrema().values;\r\n    if (extrema.indexOf(0) === -1) {\r\n      extrema = [0].concat(extrema);\r\n    }\r\n    if (extrema.indexOf(1) === -1) {\r\n      extrema.push(1);\r\n    }\r\n\r\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\r\n      t2 = extrema[i];\r\n      segment = this.split(t1, t2);\r\n      segment._t1 = t1;\r\n      segment._t2 = t2;\r\n      pass1.push(segment);\r\n      t1 = t2;\r\n    }\r\n\r\n    // second pass: further reduce these segments to simple segments\r\n    pass1.forEach(function (p1) {\r\n      t1 = 0;\r\n      t2 = 0;\r\n      while (t2 <= 1) {\r\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\r\n          segment = p1.split(t1, t2);\r\n          if (!segment.simple()) {\r\n            t2 -= step;\r\n            if (abs$1(t1 - t2) < step) {\r\n              // we can never form a reduction\r\n              return [];\r\n            }\r\n            segment = p1.split(t1, t2);\r\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\r\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\r\n            pass2.push(segment);\r\n            t1 = t2;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (t1 < 1) {\r\n        segment = p1.split(t1, 1);\r\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\r\n        segment._t2 = p1._t2;\r\n        pass2.push(segment);\r\n      }\r\n    });\r\n    return pass2;\r\n  }\r\n\r\n  translate(v, d1, d2) {\r\n    d2 = typeof d2 === \"number\" ? d2 : d1;\r\n\r\n    // TODO: make this take curves with control points outside\r\n    //       of the start-end interval into account\r\n\r\n    const o = this.order;\r\n    let d = this.points.map((_, i) => (1 - i / o) * d1 + (i / o) * d2);\r\n    return new Bezier(\r\n      this.points.map((p, i) => ({\r\n        x: p.x + v.x * d[i],\r\n        y: p.y + v.y * d[i],\r\n      }))\r\n    );\r\n  }\r\n\r\n  scale(d) {\r\n    const order = this.order;\r\n    let distanceFn = false;\r\n    if (typeof d === \"function\") {\r\n      distanceFn = d;\r\n    }\r\n    if (distanceFn && order === 2) {\r\n      return this.raise().scale(distanceFn);\r\n    }\r\n\r\n    // TODO: add special handling for non-linear degenerate curves.\r\n\r\n    const clockwise = this.clockwise;\r\n    const points = this.points;\r\n\r\n    if (this._linear) {\r\n      return this.translate(\r\n        this.normal(0),\r\n        distanceFn ? distanceFn(0) : d,\r\n        distanceFn ? distanceFn(1) : d\r\n      );\r\n    }\r\n\r\n    const r1 = distanceFn ? distanceFn(0) : d;\r\n    const r2 = distanceFn ? distanceFn(1) : d;\r\n    const v = [this.offset(0, 10), this.offset(1, 10)];\r\n    const np = [];\r\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\r\n\r\n    if (!o) {\r\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\r\n    }\r\n\r\n    // move all points by distance 'd' wrt the origin 'o',\r\n    // and move end points by fixed distance along normal.\r\n    [0, 1].forEach(function (t) {\r\n      const p = (np[t * order] = utils.copy(points[t * order]));\r\n      p.x += (t ? r2 : r1) * v[t].n.x;\r\n      p.y += (t ? r2 : r1) * v[t].n.y;\r\n    });\r\n\r\n    if (!distanceFn) {\r\n      // move control points to lie on the intersection of the offset\r\n      // derivative vector, and the origin-through-control vector\r\n      [0, 1].forEach((t) => {\r\n        if (order === 2 && !!t) return;\r\n        const p = np[t * order];\r\n        const d = this.derivative(t);\r\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\r\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\r\n      });\r\n      return new Bezier(np);\r\n    }\r\n\r\n    // move control points by \"however much necessary to\r\n    // ensure the correct tangent to endpoint\".\r\n    [0, 1].forEach(function (t) {\r\n      if (order === 2 && !!t) return;\r\n      var p = points[t + 1];\r\n      var ov = {\r\n        x: p.x - o.x,\r\n        y: p.y - o.y,\r\n      };\r\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\r\n      if (distanceFn && !clockwise) rc = -rc;\r\n      var m = sqrt$1(ov.x * ov.x + ov.y * ov.y);\r\n      ov.x /= m;\r\n      ov.y /= m;\r\n      np[t + 1] = {\r\n        x: p.x + rc * ov.x,\r\n        y: p.y + rc * ov.y,\r\n      };\r\n    });\r\n    return new Bezier(np);\r\n  }\r\n\r\n  outline(d1, d2, d3, d4) {\r\n    d2 = d2 === undefined ? d1 : d2;\r\n\r\n    if (this._linear) {\r\n      // TODO: find the actual extrema, because they might\r\n      //       be before the start, or past the end.\r\n\r\n      const n = this.normal(0);\r\n      const start = this.points[0];\r\n      const end = this.points[this.points.length - 1];\r\n      let s, mid, e;\r\n\r\n      if (d3 === undefined) {\r\n        d3 = d1;\r\n        d4 = d2;\r\n      }\r\n\r\n      s = { x: start.x + n.x * d1, y: start.y + n.y * d1 };\r\n      e = { x: end.x + n.x * d3, y: end.y + n.y * d3 };\r\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\r\n      const fline = [s, mid, e];\r\n\r\n      s = { x: start.x - n.x * d2, y: start.y - n.y * d2 };\r\n      e = { x: end.x - n.x * d4, y: end.y - n.y * d4 };\r\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\r\n      const bline = [e, mid, s];\r\n\r\n      const ls = utils.makeline(bline[2], fline[0]);\r\n      const le = utils.makeline(fline[2], bline[0]);\r\n      const segments = [ls, new Bezier(fline), le, new Bezier(bline)];\r\n      return new PolyBezier(segments);\r\n    }\r\n\r\n    const reduced = this.reduce(),\r\n      len = reduced.length,\r\n      fcurves = [];\r\n\r\n    let bcurves = [],\r\n      p,\r\n      alen = 0,\r\n      tlen = this.length();\r\n\r\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\r\n\r\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\r\n      return function (v) {\r\n        const f1 = alen / tlen,\r\n          f2 = (alen + slen) / tlen,\r\n          d = e - s;\r\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\r\n      };\r\n    }\r\n\r\n    // form curve oulines\r\n    reduced.forEach(function (segment) {\r\n      const slen = segment.length();\r\n      if (graduated) {\r\n        fcurves.push(\r\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\r\n        );\r\n        bcurves.push(\r\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\r\n        );\r\n      } else {\r\n        fcurves.push(segment.scale(d1));\r\n        bcurves.push(segment.scale(-d2));\r\n      }\r\n      alen += slen;\r\n    });\r\n\r\n    // reverse the \"return\" outline\r\n    bcurves = bcurves\r\n      .map(function (s) {\r\n        p = s.points;\r\n        if (p[3]) {\r\n          s.points = [p[3], p[2], p[1], p[0]];\r\n        } else {\r\n          s.points = [p[2], p[1], p[0]];\r\n        }\r\n        return s;\r\n      })\r\n      .reverse();\r\n\r\n    // form the endcaps as lines\r\n    const fs = fcurves[0].points[0],\r\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\r\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\r\n      be = bcurves[0].points[0],\r\n      ls = utils.makeline(bs, fs),\r\n      le = utils.makeline(fe, be),\r\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves);\r\n\r\n    return new PolyBezier(segments);\r\n  }\r\n\r\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\r\n    d2 = d2 || d1;\r\n    const outline = this.outline(d1, d2).curves;\r\n    const shapes = [];\r\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\r\n      const shape = utils.makeshape(\r\n        outline[i],\r\n        outline[len - i],\r\n        curveIntersectionThreshold\r\n      );\r\n      shape.startcap.virtual = i > 1;\r\n      shape.endcap.virtual = i < len / 2 - 1;\r\n      shapes.push(shape);\r\n    }\r\n    return shapes;\r\n  }\r\n\r\n  intersects(curve, curveIntersectionThreshold) {\r\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\r\n    if (curve.p1 && curve.p2) {\r\n      return this.lineIntersects(curve);\r\n    }\r\n    if (curve instanceof Bezier) {\r\n      curve = curve.reduce();\r\n    }\r\n    return this.curveintersects(\r\n      this.reduce(),\r\n      curve,\r\n      curveIntersectionThreshold\r\n    );\r\n  }\r\n\r\n  lineIntersects(line) {\r\n    const mx = min(line.p1.x, line.p2.x),\r\n      my = min(line.p1.y, line.p2.y),\r\n      MX = max(line.p1.x, line.p2.x),\r\n      MY = max(line.p1.y, line.p2.y);\r\n    return utils.roots(this.points, line).filter((t) => {\r\n      var p = this.get(t);\r\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\r\n    });\r\n  }\r\n\r\n  selfintersects(curveIntersectionThreshold) {\r\n    // \"simple\" curves cannot intersect with their direct\r\n    // neighbour, so for each segment X we check whether\r\n    // it intersects [0:x-2][x+2:last].\r\n\r\n    const reduced = this.reduce(),\r\n      len = reduced.length - 2,\r\n      results = [];\r\n\r\n    for (let i = 0, result, left, right; i < len; i++) {\r\n      left = reduced.slice(i, i + 1);\r\n      right = reduced.slice(i + 2);\r\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\r\n      results.push(...result);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  curveintersects(c1, c2, curveIntersectionThreshold) {\r\n    const pairs = [];\r\n    // step 1: pair off any overlapping segments\r\n    c1.forEach(function (l) {\r\n      c2.forEach(function (r) {\r\n        if (l.overlaps(r)) {\r\n          pairs.push({ left: l, right: r });\r\n        }\r\n      });\r\n    });\r\n    // step 2: for each pairing, run through the convergence algorithm.\r\n    let intersections = [];\r\n    pairs.forEach(function (pair) {\r\n      const result = utils.pairiteration(\r\n        pair.left,\r\n        pair.right,\r\n        curveIntersectionThreshold\r\n      );\r\n      if (result.length > 0) {\r\n        intersections = intersections.concat(result);\r\n      }\r\n    });\r\n    return intersections;\r\n  }\r\n\r\n  arcs(errorThreshold) {\r\n    errorThreshold = errorThreshold || 0.5;\r\n    return this._iterate(errorThreshold, []);\r\n  }\r\n\r\n  _error(pc, np1, s, e) {\r\n    const q = (e - s) / 4,\r\n      c1 = this.get(s + q),\r\n      c2 = this.get(e - q),\r\n      ref = utils.dist(pc, np1),\r\n      d1 = utils.dist(pc, c1),\r\n      d2 = utils.dist(pc, c2);\r\n    return abs$1(d1 - ref) + abs$1(d2 - ref);\r\n  }\r\n\r\n  _iterate(errorThreshold, circles) {\r\n    let t_s = 0,\r\n      t_e = 1,\r\n      safety;\r\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\r\n    do {\r\n      safety = 0;\r\n\r\n      // step 1: start with the maximum possible arc\r\n      t_e = 1;\r\n\r\n      // points:\r\n      let np1 = this.get(t_s),\r\n        np2,\r\n        np3,\r\n        arc,\r\n        prev_arc;\r\n\r\n      // booleans:\r\n      let curr_good = false,\r\n        prev_good = false,\r\n        done;\r\n\r\n      // numbers:\r\n      let t_m = t_e,\r\n        prev_e = 1;\r\n\r\n      // step 2: find the best possible arc\r\n      do {\r\n        prev_good = curr_good;\r\n        prev_arc = arc;\r\n        t_m = (t_s + t_e) / 2;\r\n\r\n        np2 = this.get(t_m);\r\n        np3 = this.get(t_e);\r\n\r\n        arc = utils.getccenter(np1, np2, np3);\r\n\r\n        //also save the t values\r\n        arc.interval = {\r\n          start: t_s,\r\n          end: t_e,\r\n        };\r\n\r\n        let error = this._error(arc, np1, t_s, t_e);\r\n        curr_good = error <= errorThreshold;\r\n\r\n        done = prev_good && !curr_good;\r\n        if (!done) prev_e = t_e;\r\n\r\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\r\n        if (curr_good) {\r\n          // if e is already at max, then we're done for this arc.\r\n          if (t_e >= 1) {\r\n            // make sure we cap at t=1\r\n            arc.interval.end = prev_e = 1;\r\n            prev_arc = arc;\r\n            // if we capped the arc segment to t=1 we also need to make sure that\r\n            // the arc's end angle is correct with respect to the bezier end point.\r\n            if (t_e > 1) {\r\n              let d = {\r\n                x: arc.x + arc.r * cos$1(arc.e),\r\n                y: arc.y + arc.r * sin$1(arc.e),\r\n              };\r\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\r\n            }\r\n            break;\r\n          }\r\n          // if not, move it up by half the iteration distance\r\n          t_e = t_e + (t_e - t_s) / 2;\r\n        } else {\r\n          // this is a bad arc: we need to move 'e' down to find a good arc\r\n          t_e = t_m;\r\n        }\r\n      } while (!done && safety++ < 100);\r\n\r\n      if (safety >= 100) {\r\n        break;\r\n      }\r\n\r\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\r\n\r\n      prev_arc = prev_arc ? prev_arc : arc;\r\n      circles.push(prev_arc);\r\n      t_s = prev_e;\r\n    } while (t_e < 1);\r\n    return circles;\r\n  }\r\n}\r\n\r\nexport { Bezier };\r\n"],"names":["abs","cos","sin","acos","atan2","sqrt","pow","crt","v","pi","tau","quart","epsilon","nMax","nMin","ZERO","utils","t","derivativeFn","d","l","points","_3d","order","mt","p","ret","mt2","t2","b","c","dCpts","i","ratios","r","f1","f2","f3","f4","dpoints","list","j","dpt","m","M","a","precision","len","sum","ds","de","ts","te","d1","d2","v2","v1","s","obj","o","dx1","dy1","dx2","dy2","cross","dot","pos","p1","p2","dx","dy","LUT","point","mdist","mpos","idx","bottom","top","x1","y1","x2","y2","x3","y3","x4","y4","nx","ny","p3","p4","Bezier","sections","mx","my","MX","MY","bbox","s1","bbox1","s2","bbox2","curveIntersectionThreshold","intersections","a1","a2","l1","l2","iss","forward","back","bpl","fpl","start","end","shape","curve","min","max","line","tx","ty","aligned","reduce","m1","m2","pa","pb","pc","pd","q","q2","discriminant","u1","mp3","mp33","cosphi","phi","crtr","t1","sd","kOnly","num","dnm","adk","dk","k","dd","qdsum","pk","nk","v3","trm","sq","b1","b2","dims","dim","_bbox","c1","c2","c1b","c2b","threshold","cc1","cc2","pairs","pair","results","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","e","_","mpx","mpy","PolyBezier","curves","curve1","curve2","lp","fp","midpoint","firstCurve","lastCurve","offset","abs$1","cos$1","sin$1","acos$1","sqrt$1","pi$1","coords","args","coordlen","newargs","higher","step","baselength","abc","S","B","E","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","A","nc1","nc2","x","y","last","print","angle","u","um","C","steps","error","lut","hits","closest","ft","np","pim","r1","r2","q1","R","_p","pt","result","roots","mfn","extrema","lbbox","tbbox","n","nv","n1","n2","segment","pass1","pass2","distanceFn","clockwise","ov","rc","d3","d4","mid","fline","bline","ls","le","segments","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","slen","fs","fe","bs","be","outline","shapes","left","right","errorThreshold","np1","ref","circles","t_s","t_e","safety","np2","np3","prev_arc","curr_good","prev_good","done","t_m","prev_e"],"mappings":"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"}