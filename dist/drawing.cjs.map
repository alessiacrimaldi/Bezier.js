{"version":3,"file":"drawing.cjs","sources":["../lib/drawing.js"],"sourcesContent":["import * as calculation from \"./calculation.js\";\r\n\r\nexport default class Drawing {\r\n    #randomColors;\r\n    #randomIndex;\r\n\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n        this.#randomColors = [];\r\n        this.#randomIndex = 0;\r\n        /* FUNCTIONS FOR RANDOM CURVE COLOURS */\r\n        for (var i = 0, j; i < 360; i++) {\r\n            j = (i * 47) % 360;\r\n            this.#randomColors.push(\"hsl(\" + j + \",50%,50%)\");\r\n        }\r\n    }\r\n\r\n    #getRandomColor() {\r\n        this.#randomIndex = (this.#randomIndex + 1) % this.#randomColors.length;\r\n        return this.#randomColors[this.randomIndex];\r\n    }\r\n\r\n    #getRandomFill(a) {\r\n        this.#randomIndex = (this.#randomIndex + 1) % this.#randomColors.length;\r\n        a = typeof a === \"undefined\" ? 1 : a;\r\n        var c = this.#randomColors[this.#randomIndex];\r\n        c = c.replace(\"hsl(\", \"hsla(\").replace(\")\", \",\" + a + \")\");\r\n        return c;\r\n    }\r\n\r\n    /* BASIC DRAWING METHODS */\r\n    drawLine(p1, p2, colour = \"lightgrey\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(p1.x, p1.y);\r\n        this.ctx.lineTo(p2.x, p2.y);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawPoints(points, r, colour) {\r\n        points.forEach(p => this.drawPoint(p.x, p.y, r, colour));\r\n    }\r\n\r\n    drawPoint(px, py, r = 3.5, colour = \"black\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(px, py, r, 0, 2 * Math.PI);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawSkeleton(curve) {\r\n        var pts = curve.points;\r\n        this.drawLine(pts[0], pts[1]);\r\n        if (pts.length === 3) {\r\n            this.drawLine(pts[1], pts[2]);\r\n        } else if (pts.length === 4) {\r\n            this.drawLine(pts[2], pts[3]);\r\n        }\r\n        this.drawPoints(pts);\r\n    }\r\n\r\n    drawCurve(curve, colour = \"black\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        var pts = curve.points;\r\n        this.ctx.moveTo(pts[0].x, pts[0].y);\r\n        if (curve._lut.length == 0) {\r\n            calculation.calculateCurvePoints(curve);\r\n        }\r\n        this.drawPoints(curve._lut, 0.1, colour);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    drawText(text, offset) {\r\n        offset = offset || { x: 0, y: 0 };\r\n        this.ctx.fillText(text, offset.x, offset.y);\r\n    }\r\n\r\n    /* ADDITIONAL DRAWING METHODS FOR LIBRARY USAGE */\r\n    drawLookUpTable(lut, r, colour) {\r\n        this.drawPoints(lut, r, colour);\r\n    }\r\n\r\n    drawLength(curve, arclength, colour = \"red\") {\r\n        var offset = calculation.getOffsetCurve(curve, -10);\r\n        var last = offset.length - 1;\r\n        offset.forEach((c, idx) => {\r\n            this.drawCurve(c, colour);\r\n            if (idx === last) {\r\n                let p1 = calculation.getOffsetCurve(curve, 0.95, -15);\r\n                let p2 = calculation.getCurvePoint(c, 1);\r\n                let p3 = calculation.getOffsetCurve(curve, 0.95, -5);\r\n                this.drawLine(p1, p2, colour);\r\n                this.drawLine(p2, p3, colour);\r\n                let label = ((100 * arclength) | 0) / 100 + \"px\";\r\n                this.drawText(label, { x: p2.x + 7, y: p2.y - 3 });\r\n            }\r\n        });\r\n    }\r\n\r\n    drawCurvePoint(point, r = 5, colour = \"red\") {\r\n        this.drawPoint(point.x, point.y, r, colour);\r\n    }\r\n\r\n    drawTangent(curve, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, curve._derivative.t);\r\n        var dv = curve._derivative;\r\n        this.drawPoint(pt.x, pt.y, 2, \"red\");\r\n        this.drawLine(pt, { x: pt.x + dv.x, y: pt.y + dv.y }, colour);\r\n    }\r\n\r\n    drawTangents(curve, dvs, gap, colour = \"red\") {\r\n        for (var t = 0, i = 0, pt; t <= 1; t += gap, i++) {\r\n            pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + dvs[i].x, y: pt.y + dvs[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawNormal(curve, normal, t, d = 20, colour = \"red\") {\r\n        var pt = calculation.getCurvePoint(curve, t);\r\n        this.drawLine(pt, { x: pt.x + d * normal.x, y: pt.y + d * normal.y }, colour);\r\n    }\r\n\r\n    drawNormals(curve, normals, gap, d = 20, colour = \"red\") {\r\n        for (var t = 0, i = 0; t <= 1; t += gap, i++) {\r\n            var pt = calculation.getCurvePoint(curve, t);\r\n            this.drawLine(pt, { x: pt.x + d * normals[i].x, y: pt.y + d * normals[i].y }, colour);\r\n        }\r\n    }\r\n\r\n    drawSplittedCurve(curve, split, colour = \"red\", t1, t2) {\r\n        if (t2) {\r\n            this.drawCurve(split, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1).x, calculation.getCurvePoint(curve, t1).y, 3, colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t2).x, calculation.getCurvePoint(curve, t2).y, 3, colour);\r\n        } else {\r\n            this.drawCurve(split[0], colour);\r\n            this.drawCurve(split[1], colour);\r\n            this.drawPoint(calculation.getCurvePoint(curve, t1).x, calculation.getCurvePoint(curve, t1).y, 3, colour);\r\n        }\r\n    }\r\n\r\n    drawCurveExtremas(curve, extrema, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        extrema.values.forEach(t => {\r\n            let extremaPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(extremaPoint.x, extremaPoint.y, r, colour);\r\n        })\r\n    }\r\n\r\n    drawInflectionPoints(curve, inflectionPoints, r = 3, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        inflectionPoints.forEach(t => {\r\n            let inflectionPoint = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(inflectionPoint.x, inflectionPoint.y, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvature(curve, kr, t, colour = \"#ff7f33\") {\r\n        var p = calculation.getCurvePoint(curve, t);\r\n        var n = calculation.calculateNormal(curve, t);\r\n        this.drawLine(p, { x: p.x + n.x * kr.k * 5000, y: p.y + n.y * kr.k * 5000, }, colour);\r\n    }\r\n\r\n    drawCurvatures(curve, krs, gap = 2) {\r\n        for (var s = 0, i = 0; s < 256; s += gap, i++) {\r\n            let t = s / 255;\r\n            let p = calculation.getCurvePoint(curve, t);\r\n            let n = calculation.calculateNormal(curve, t, true);\r\n            this.drawLine(p, { x: p.x + n.x * krs[i].k * 5000, y: p.y + n.y * krs[i].k * 5000, }, \"rgba(255,127,\" + s + \",0.6)\");\r\n        }\r\n    }\r\n\r\n    drawBoundingBox(bbox, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(bbox.x.min, bbox.y.min);\r\n        this.ctx.lineTo(bbox.x.min, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.max);\r\n        this.ctx.lineTo(bbox.x.max, bbox.y.min);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawHullPoints(hull, colour = \"red\") {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.beginPath();\r\n        if (hull.length === 6) {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.moveTo(hull[3].x, hull[3].y);\r\n            this.ctx.lineTo(hull[4].x, hull[4].y);\r\n        } else {\r\n            this.ctx.moveTo(hull[0].x, hull[0].y);\r\n            this.ctx.lineTo(hull[1].x, hull[1].y);\r\n            this.ctx.lineTo(hull[2].x, hull[2].y);\r\n            this.ctx.lineTo(hull[3].x, hull[3].y);\r\n            this.ctx.moveTo(hull[4].x, hull[4].y);\r\n            this.ctx.lineTo(hull[5].x, hull[5].y);\r\n            this.ctx.lineTo(hull[6].x, hull[6].y);\r\n            this.ctx.moveTo(hull[7].x, hull[7].y);\r\n            this.ctx.lineTo(hull[8].x, hull[8].y);\r\n        }\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.drawPoint(hull.slice(-1)[0].x, hull.slice(-1)[0].y, 4.5, colour);\r\n    }\r\n\r\n    drawProjection(proj, p, colour = \"red\") {\r\n        this.drawLine(proj, p, colour);\r\n    }\r\n\r\n    drawOffsetCurve(offsetCurve, colour = \"red\") {\r\n        offsetCurve.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawOffsetPoint(offsetCoords, colour = \"red\") {\r\n        this.drawPoint(offsetCoords.x, offsetCoords.y, 4, colour);\r\n    }\r\n\r\n    drawReducedCurve(reduced, colour) {\r\n        reduced.forEach((c, i) => {\r\n            if (i > 0) this.drawPoint(c.points[0].x, c.points[0].y, 3);\r\n            this.drawCurve(c, colour || this.#getRandomColor());\r\n        })\r\n    }\r\n\r\n    drawCircularArcs(arcs, colour) {\r\n        arcs.forEach(arc => this.drawArc(arc, colour));\r\n    }\r\n\r\n    drawArc(arc, colour = this.#getRandomFill(0.1)) {\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(arc.x, arc.y);\r\n        this.ctx.arc(arc.x, arc.y, arc.r, arc.s, arc.e);\r\n        this.ctx.lineTo(arc.x, arc.y);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawScaledCurve(reduced, scaled, colour) {\r\n        this.drawReducedCurve(reduced, \"black\");\r\n        for (var k = 0; k <= 6; k++) {\r\n            this.drawCurve(scaled[k], colour);\r\n        }\r\n    }\r\n\r\n    drawCurveOutline(outline, outColour = \"red\", offset, offColour = \"rgba(0,0,255,0.2)\") {\r\n        outline.curves.forEach(c => this.drawCurve(c, outColour));\r\n        if (offset) {\r\n            offset.pos.curves.forEach(c => this.drawCurve(c, offColour));\r\n            offset.neg.curves.forEach(c => this.drawCurve(c, offColour));\r\n        }\r\n    }\r\n\r\n    drawCurveGradOutline(goutline, colour = \"red\") {\r\n        goutline.curves.forEach(c => this.drawCurve(c, colour));\r\n    }\r\n\r\n    drawShapedOutline(soutline, colour, fillColour) {\r\n        soutline.forEach(s => this.drawShape(s, colour, fillColour));\r\n    }\r\n\r\n    drawShape(shape, colour = \"red\", fillColour = this.#getRandomFill(0.2)) {\r\n        this.ctx.strokeStyle = colour;\r\n        this.ctx.fillStyle = fillColour;\r\n        var order = shape.forward.points.length - 1;\r\n        var scl = shape.startcap.points.length;\r\n        var ecl = shape.endcap.points.length;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(\r\n            shape.startcap.points[0].x,\r\n            shape.startcap.points[0].y\r\n        );\r\n        this.ctx.lineTo(\r\n            shape.startcap.points[scl - 1].x,\r\n            shape.startcap.points[scl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y,\r\n                shape.forward.points[3].x,\r\n                shape.forward.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.forward.points[1].x,\r\n                shape.forward.points[1].y,\r\n                shape.forward.points[2].x,\r\n                shape.forward.points[2].y\r\n            );\r\n        }\r\n        this.ctx.lineTo(\r\n            shape.endcap.points[ecl - 1].x,\r\n            shape.endcap.points[ecl - 1].y\r\n        );\r\n        if (order === 3) {\r\n            this.ctx.bezierCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y,\r\n                shape.back.points[3].x,\r\n                shape.back.points[3].y\r\n            );\r\n        } else {\r\n            this.ctx.quadraticCurveTo(\r\n                shape.back.points[1].x,\r\n                shape.back.points[1].y,\r\n                shape.back.points[2].x,\r\n                shape.back.points[2].y\r\n            );\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    drawSelfIntersection(curve, intersection, r = 4.5, colour = \"black\") {\r\n        if (curve.order == 2) return\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point.x, point.y, r, colour);\r\n        })\r\n    }\r\n\r\n    drawLineIntersection(curve, intersection, r = 4.5, colour = \"black\") {\r\n        intersection.forEach(t => {\r\n            var point = calculation.getCurvePoint(curve, t);\r\n            this.drawPoint(point.x, point.y, r, colour);\r\n        })\r\n    }\r\n\r\n    drawCurvesIntersection(curve, intersection, r = 4.5, colour = \"black\") {\r\n        intersection.forEach(pair => {\r\n            var t = pair.split(\"/\").map(v => parseFloat(v));\r\n            var point = calculation.getCurvePoint(curve, t[0]);\r\n            this.drawPoint(point.x, point.y, r, colour);\r\n        })\r\n    }\r\n}"],"names":["Drawing","ctx","__privateAdd","_getRandomColor","_getRandomFill","_randomColors","_randomIndex","__privateSet","j","__privateGet","p1","p2","colour","points","r","p","px","py","curve","pts","calculation.calculateCurvePoints","text","offset","lut","arclength","calculation.getOffsetCurve","last","c","idx","calculation.getCurvePoint","p3","label","point","pt","dv","dvs","gap","t","i","normal","d","normals","split","t1","t2","extrema","extremaPoint","inflectionPoints","inflectionPoint","kr","n","calculation.calculateNormal","krs","s","bbox","hull","proj","offsetCurve","offsetCoords","reduced","__privateMethod","getRandomColor_fn","arcs","arc","getRandomFill_fn","scaled","k","outline","outColour","offColour","goutline","soutline","fillColour","shape","order","scl","ecl","intersection","pair","v","a"],"mappings":"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"}