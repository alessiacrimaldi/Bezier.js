{"version":3,"file":"calculation.cjs","sources":["../lib/bezier.js","../lib/calculation.js"],"sourcesContent":["/**\n  A javascript Bezier curve library\n**/\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    return new Bezier(\n      p1.x,\n      p1.y,\n      (p1.x + p2.x) / 2,\n      (p1.y + p2.y) / 2,\n      p2.x,\n      p2.y\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n      sq = Math.sqrt(trm),\n      d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          \"/\" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  setJoinC_0() {\n    // to do --> se discordi, fare il punto medio\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\n// math-inlining.\nconst { abs: abs$1, min, max, cos: cos$1, sin: sin$1, acos: acos$1, sqrt: sqrt$1 } = Math;\nconst pi$1 = Math.PI;\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            \"Only new Bezier(point[]) is accepted for 4th and higher order curves\"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== \"undefined\"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = [\"x\", \"y\"]);\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n\n    // is this curve, practically speaking, a straight line?\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    const baselength = utils.dist(points[0], points[order]);\n    this._linear = aligned.reduce((t, p) => t + abs$1(p.y), 0) < baselength / 50;\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    // shortcuts, although they're really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // n steps means n+1 points\n    steps++;\n    this._lut = [];\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0], this._3d);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1], this._3d);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt$1(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = sqrt$1(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = sqrt$1(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = sqrt$1(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use \"de Casteljau\" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we're done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return abs$1(acos$1(s)) < pi$1 / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (abs$1(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  translate(v, d1, d2) {\n    d2 = typeof d2 === \"number\" ? d2 : d1;\n\n    // TODO: make this take curves with control points outside\n    //       of the start-end interval into account\n\n    const o = this.order;\n    let d = this.points.map((_, i) => (1 - i / o) * d1 + (i / o) * d2);\n    return new Bezier(\n      this.points.map((p, i) => ({\n        x: p.x + v.x * d[i],\n        y: p.y + v.y * d[i],\n      }))\n    );\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for non-linear degenerate curves.\n\n    const clockwise = this.clockwise;\n    const points = this.points;\n\n    if (this._linear) {\n      return this.translate(\n        this.normal(0),\n        distanceFn ? distanceFn(0) : d,\n        distanceFn ? distanceFn(1) : d\n      );\n    }\n\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    }\n\n    // move all points by distance 'd' wrt the origin 'o',\n    // and move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt$1(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = d2 === undefined ? d1 : d2;\n\n    if (this._linear) {\n      // TODO: find the actual extrema, because they might\n      //       be before the start, or past the end.\n\n      const n = this.normal(0);\n      const start = this.points[0];\n      const end = this.points[this.points.length - 1];\n      let s, mid, e;\n\n      if (d3 === undefined) {\n        d3 = d1;\n        d4 = d2;\n      }\n\n      s = { x: start.x + n.x * d1, y: start.y + n.y * d1 };\n      e = { x: end.x + n.x * d3, y: end.y + n.y * d3 };\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\n      const fline = [s, mid, e];\n\n      s = { x: start.x - n.x * d2, y: start.y - n.y * d2 };\n      e = { x: end.x - n.x * d4, y: end.y - n.y * d4 };\n      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };\n      const bline = [e, mid, s];\n\n      const ls = utils.makeline(bline[2], fline[0]);\n      const le = utils.makeline(fline[2], bline[0]);\n      const segments = [ls, new Bezier(fline), le, new Bezier(bline)];\n      return new PolyBezier(segments);\n    }\n\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the \"return\" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves);\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return abs$1(d1 - ref) + abs$1(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the \"good `t` closest to no-longer-good\"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move 'e' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos$1(arc.e),\n                y: arc.y + arc.r * sin$1(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\nexport { Bezier };\n","import { Bezier } from \"./bezier.js\";\r\n\r\n\r\nexport function getCurve(xt, yt, writeon) {\r\n    var curve, type;\r\n    if (xt.length == 3 && yt.length == 3) {\r\n        curve = new Bezier(xt[0], yt[0], xt[1], yt[1], xt[2], yt[2]);\r\n        type = \"quadratic\";\r\n    } else if (xt.length == 4 && yt.length == 4) {\r\n        curve = new Bezier(xt[0], yt[0], xt[1], yt[1], xt[2], yt[2], xt[3], yt[3]);\r\n        type = \"cubic\";\r\n    } else {\r\n        throw new Error(\"Invalid curve input control points.\");\r\n    }\r\n    if (writeon) {\r\n        console.log(`Bézier ${type} curve:\\n`, curve);\r\n    }\r\n    return curve;\r\n}\r\n\r\nexport function calculateCurvePoints(curve) {\r\n    var steps = 1000;\r\n    for (let i = 0, p, t; i < steps; i++) {\r\n        t = i / (steps - 1);\r\n        p = curve.compute(t);\r\n        p.t = t;\r\n        curve._lut.push(p);\r\n    }\r\n    return curve._lut;\r\n}\r\n\r\nexport function getLookUpTable(curve, steps = 100) {\r\n    curve.getLUT(steps);\r\n    return curve._lut;\r\n}\r\n\r\nexport function calculateLength(curve) {\r\n    return curve._curvelength = curve.length();\r\n}\r\n\r\nexport function getCurvePoint(curve, t, writeon) {\r\n    if (!writeon) {\r\n        return curve.get(t);\r\n    } else {\r\n        return curve._curvepoint = curve.get(t);\r\n    }\r\n}\r\n\r\nexport function calculateTangent(curve, t) {\r\n    var dv = curve.derivative(t);\r\n    dv.x *= (1 / (curve._t2 - curve._t1));\r\n    dv.y *= (1 / (curve._t2 - curve._t1));\r\n    return curve._derivative = dv;\r\n}\r\n\r\nexport function calculateTangents(curve, gap) {\r\n    var dv = [];\r\n    for (var t = 0, i = 0; t <= 1; t += gap, i++) {\r\n        dv[i] = curve.derivative(t);\r\n        dv[i].x *= (1 / (curve._t2 - curve._t1));\r\n        dv[i].y *= (1 / (curve._t2 - curve._t1));\r\n    }\r\n    return curve._derivatives = dv;\r\n}\r\n\r\nexport function calculateNormal(curve, t, writeoff) {\r\n    if (writeoff) {\r\n        return { x: curve.normal(t).x, y: curve.normal(t).y, t: t };\r\n    } else {\r\n        return curve._normal = { x: curve.normal(t).x, y: curve.normal(t).y, t: t };\r\n    }\r\n}\r\n\r\nexport function calculateNormals(curve, gap) {\r\n    var normals = [];\r\n    for (var t = 0, i = 0; t <= 1; t += gap, i++) {\r\n        normals[i] = { x: curve.normal(t).x, y: curve.normal(t).y, t: t };\r\n    }\r\n    return curve._normals = normals;\r\n}\r\n\r\nexport function splitCurve(curve, t1, t2) {\r\n    if (t2) {\r\n        return curve._subcurve = curve.split(t1, t2);\r\n    } else {\r\n        return curve._subcurves = [curve.split(t1).left, curve.split(t1).right];\r\n    }\r\n}\r\n\r\nexport function calculateCurveExtremas(curve) {\r\n    return curve._extremas = curve.extrema();\r\n}\r\n\r\nexport function calculateInflectionPoints(curve) {\r\n    return curve._inflectionpoints = curve.inflections();\r\n}\r\n\r\nexport function calculateCurvature(curve, t) {\r\n    return curve._curvature = { k: curve.curvature(t).k, r: curve.curvature(t).r, t: t };\r\n}\r\n\r\nexport function calculateCurvatures(curve, gap = 2) {\r\n    var kr = [];\r\n    for (var s = 0, i = 0; s < 256; s += gap, i++) {\r\n        let t = s / 255;\r\n        kr[i] = { k: curve.curvature(t).k, r: curve.curvature(t).r, t: t };\r\n    }\r\n    return curve._curvatures = kr;\r\n}\r\n\r\nexport function calculateBoundingBox(curve) {\r\n    return curve._boundingbox = curve.bbox();\r\n}\r\n\r\nexport function calculateHullPoints(curve, t) {\r\n    return curve._hullpoints = curve.hull(t);\r\n}\r\n\r\nexport function calculateClosestPoint(curve, point) {\r\n    return curve._projectpoint = curve.project(point);\r\n}\r\n\r\nexport function calculateOffset(curve, d, t) {\r\n    if (t) {\r\n        return curve._offsetpoint = curve.offset(t, d);\r\n    } else {\r\n        return curve._offsetcurves = curve.offset(d);\r\n    }\r\n}\r\n\r\nexport function calculateReducedCurve(curve) {\r\n    return curve._reducedcurves = curve.reduce();\r\n}\r\n\r\nexport function calculateArcs(curve, threshold = 0.5) {\r\n    return curve._arcs = curve.arcs(threshold);\r\n}\r\n\r\nexport function calculateScaledCurve(curve, reduced) {\r\n    var scaledCurves = [];\r\n    for (var d = -30, k = 0; d <= 30; d += 10, k++) {\r\n        scaledCurves[k] = reduced.scale(d);\r\n    }\r\n    return curve._scaledcurves = scaledCurves;\r\n}\r\n\r\nexport function calculateOutline(curve, d1, d2, d3, d4) {\r\n    if (d4) {\r\n        return curve._outline = curve.outline(d1, d2, d3, d4);\r\n    } else if (d3) {\r\n        return curve._outline = curve.outline(d1, d2, d3);\r\n    } else if (d2) {\r\n        return curve._outline = curve.outline(d1, d2);\r\n    } else {\r\n        return curve._outline = curve.outline(d1);\r\n    }\r\n}\r\n\r\nexport function calculateShapedOutline(curve, d1, d2, threshold) {\r\n    if (threshold) {\r\n        return curve._shapedoutline = curve.outlineshapes(d1, d2, threshold);\r\n    } else if (d2) {\r\n        return curve._shapedoutline = curve.outlineshapes(d1, d2);\r\n    } else {\r\n        return curve._shapedoutline = curve.outlineshapes(d1);\r\n    }\r\n}\r\n\r\nexport function calculateIntersection(curve, other, threshold = 0.5) {\r\n    if (other) {\r\n        if (other instanceof Bezier) {\r\n            return curve._intersection = curve.intersects(other, threshold);\r\n        } else {\r\n            return curve._intersection = curve.intersects(other);\r\n        }\r\n    } else {\r\n        if (curve.order == 2) {\r\n            return curve._intersection = \"no self intersection\";\r\n        } else if (curve.order == 3) {\r\n            return curve._intersection = curve.intersects();\r\n        }\r\n    }\r\n}\r\n\r\n// utils\r\nexport function getOffsetCurve(curve, a, b) {\r\n    if (b) {\r\n        return curve.offset(a, b);\r\n    } else {\r\n        return curve.offset(a);\r\n    }\r\n}"],"names":["abs","cos","sin","acos","atan2","sqrt","pow","crt","v","pi","tau","quart","epsilon","nMax","nMin","ZERO","utils","t","derivativeFn","d","l","points","_3d","order","mt","p","ret","mt2","t2","b","c","dCpts","i","ratios","r","f1","f2","f3","f4","dpoints","list","j","dpt","m","M","a","precision","len","sum","ds","de","ts","te","d1","d2","v2","v1","s","obj","o","dx1","dy1","dx2","dy2","cross","dot","pos","p1","p2","dx","dy","LUT","point","mdist","mpos","idx","bottom","top","x1","y1","x2","y2","x3","y3","x4","y4","nx","ny","p3","p4","Bezier","sections","mx","my","MX","MY","bbox","s1","bbox1","s2","bbox2","curveIntersectionThreshold","intersections","a1","a2","l1","l2","iss","forward","back","bpl","fpl","start","end","shape","curve","min","max","line","tx","ty","aligned","reduce","m1","m2","pa","pb","pc","pd","q","q2","discriminant","u1","mp3","mp33","cosphi","phi","crtr","t1","sd","kOnly","num","dnm","adk","dk","k","dd","qdsum","pk","nk","v3","trm","sq","b1","b2","dims","dim","_bbox","c1","c2","c1b","c2b","threshold","cc1","cc2","pairs","pair","results","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","e","_","PolyBezier","curves","offset","abs$1","cos$1","sin$1","acos$1","sqrt$1","pi$1","coords","args","coordlen","newargs","higher","step","baselength","abc","S","B","E","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","A","nc1","nc2","x","y","last","print","angle","u","um","C","steps","error","lut","hits","closest","ft","np","pim","r1","r2","q1","R","_p","pt","result","roots","mfn","extrema","lbbox","tbbox","n","nv","n1","n2","segment","pass1","pass2","distanceFn","clockwise","ov","rc","d3","d4","mid","fline","bline","ls","le","segments","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","slen","fs","fe","bs","be","outline","shapes","left","right","errorThreshold","np1","ref","circles","t_s","t_e","safety","np2","np3","prev_arc","curr_good","prev_good","done","t_m","prev_e","getCurve","xt","yt","writeon","type","calculateCurvePoints","getLookUpTable","calculateLength","getCurvePoint","calculateTangent","dv","calculateTangents","gap","calculateNormal","writeoff","calculateNormals","normals","splitCurve","calculateCurveExtremas","calculateInflectionPoints","calculateCurvature","calculateCurvatures","kr","calculateBoundingBox","calculateHullPoints","calculateClosestPoint","calculateOffset","calculateReducedCurve","calculateArcs","calculateScaledCurve","scaledCurves","calculateOutline","calculateShapedOutline","calculateIntersection","other","getOffsetCurve"],"mappings":"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"}